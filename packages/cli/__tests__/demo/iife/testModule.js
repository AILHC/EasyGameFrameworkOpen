var testModule = (function (exports) {
    'use strict';

    var classA = (function () {
        function classA() {
        }
        classA.prototype.sayA = function (a) { };
        return classA;
    }());

    var classB = (function () {
        function classB() {
        }
        classB.prototype.sayb = function (b) {
            console.log("FDS");
        };
        return classB;
    }());

    var classC = (function () {
        function classC() {
        }
        classC.prototype.sayd = function (cc) {
            console.log(cc);
        };
        return classC;
    }());

    var bc = (function () {
        function bc() {
            console.log("bc");
        }
        return bc;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    var App = (function () {
        function App() {
            this._state = 0;
            this._moduleMap = {};
        }
        Object.defineProperty(App.prototype, "state", {
            get: function () {
                return this._state;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(App.prototype, "moduleMap", {
            get: function () {
                return this._moduleMap;
            },
            enumerable: false,
            configurable: true
        });
        App.prototype.bootstrap = function (bootLoaders) {
            return __awaiter(this, void 0, void 0, function () {
                var bootPromises, _loop_1, i, e_1;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.setState(App.BOOTING);
                            if (!bootLoaders || bootLoaders.length <= 0) {
                                this.setState(App.BOOTEND);
                                return [2, true];
                            }
                            if (!(bootLoaders && bootLoaders.length > 0)) return [3, 4];
                            bootPromises = [];
                            _loop_1 = function (i) {
                                var bootLoader = bootLoaders[i];
                                bootPromises.push(new Promise(function (res, rej) {
                                    bootLoader.onBoot(_this, function (isOk) {
                                        if (isOk) {
                                            res();
                                        }
                                        else {
                                            rej();
                                        }
                                    });
                                }));
                            };
                            for (i = 0; i < bootLoaders.length; i++) {
                                _loop_1(i);
                            }
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4, Promise.all(bootPromises)];
                        case 2:
                            _a.sent();
                            this.setState(App.BOOTEND);
                            return [2, true];
                        case 3:
                            e_1 = _a.sent();
                            console.error(e_1);
                            this.setState(App.BOOTEND);
                            return [2, false];
                        case 4: return [2];
                    }
                });
            });
        };
        App.prototype.init = function () {
            var moduleMap = this._moduleMap;
            var moduleIns;
            if (this.state === App.RUNING)
                return;
            for (var key in moduleMap) {
                moduleIns = moduleMap[key];
                moduleIns.onInit && moduleIns.onInit(this);
            }
            for (var key in moduleMap) {
                moduleIns = moduleMap[key];
                moduleIns.onAfterInit && moduleIns.onAfterInit(this);
            }
            this.setState(App.RUNING);
        };
        App.prototype.loadModule = function (moduleIns, key) {
            if (this._state === App.STOP)
                return false;
            var res = false;
            if (!key) {
                key = moduleIns.key;
            }
            if (key && typeof key === "string") {
                if (moduleIns) {
                    if (!this._moduleMap[key]) {
                        this._moduleMap[key] = moduleIns;
                        res = true;
                        if (this._state === App.RUNING) {
                            moduleIns.onInit && moduleIns.onInit(this);
                            moduleIns.onAfterInit && moduleIns.onAfterInit();
                        }
                    }
                    else {
                        this._log("\u52A0\u8F7D\u6A21\u5757:\u6A21\u5757:" + key + "\u5DF2\u7ECF\u5B58\u5728,\u4E0D\u91CD\u590D\u52A0\u8F7D");
                    }
                }
                else {
                    this._log("\u52A0\u8F7D\u6A21\u5757:\u6A21\u5757:" + key + "\u5B9E\u4F8B\u4E3A\u7A7A");
                }
            }
            else {
                this._log("\u52A0\u8F7D\u6A21\u5757:\u6A21\u5757key\u4E3A\u7A7A");
            }
            return res;
        };
        App.prototype.hasModule = function (moduleKey) {
            return !!this._moduleMap[moduleKey];
        };
        App.prototype.stop = function () {
            var moduleMap = this._moduleMap;
            var moduleIns;
            this.setState(App.STOP);
            for (var key in moduleMap) {
                moduleIns = moduleMap[key];
                moduleIns.onStop && moduleIns.onStop();
            }
        };
        App.prototype.getModule = function (moduleKey) {
            return this._moduleMap[moduleKey];
        };
        App.prototype.setState = function (state) {
            if (!isNaN(this._state)) {
                if (this._state >= state)
                    return;
            }
            this._state = state;
        };
        App.prototype._log = function (msg, level) {
            switch (level) {
                case 1:
                    console.warn("\u3010\u4E3B\u7A0B\u5E8F\u3011" + msg);
                    break;
                case 2:
                    console.error("\u3010\u4E3B\u7A0B\u5E8F\u3011" + msg);
                    break;
                default:
                    console.warn("\u3010\u4E3B\u7A0B\u5E8F\u3011" + msg);
                    break;
            }
        };
        App.UN_RUN = 0;
        App.BOOTING = 1;
        App.BOOTEND = 2;
        App.RUNING = 3;
        App.STOP = 4;
        return App;
    }());

    var RefOtherPkg = (function (_super) {
        __extends(RefOtherPkg, _super);
        function RefOtherPkg() {
            var _this = _super.call(this) || this;
            var a = new App();
            console.log(a);
            return _this;
        }
        return RefOtherPkg;
    }(App));

    exports.RefOtherPkg = RefOtherPkg;
    exports.bc = bc;
    exports.classA = classA;
    exports.classB = classB;
    exports.classC = classC;

    Object.defineProperty(exports, '__esModule', { value: true });

    return exports;

}({}));

    var globalTarget =window?window:global;
    globalTarget.testModule?Object.assign({},globalTarget.testModule):(globalTarget.testModule = testModule)
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
