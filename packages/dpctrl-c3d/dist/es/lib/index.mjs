import { Node, UITransform } from 'cc';
export * from '@ailhc/layer';
export * from '@ailhc/display-ctrl';

class NodeCtrl {
    constructor(dpcMgr) {
        this._mgr = dpcMgr;
    }
    onInit(config) {
    }
    onShow(config) {
        if (this.node) {
            this.node.active = true;
        }
    }
    onUpdate(updateData) {
    }
    getRess() {
        return undefined;
    }
    getNode() {
        return this.node;
    }
    getFace() {
        return this;
    }
    onDestroy(destroyRes) {
    }
    onHide() {
        if (this.node) {
            this.node.active = false;
        }
    }
    forceHide() {
        this.node && (this.node.active = false);
        this.isShowed = false;
    }
    onResize() {
    }
}

class Layer extends Node {
    onInit(layerName, layerType, layerMgr) {
        this._layerType = layerType;
        this.name = layerName;
        this._layerMgr = layerMgr;
    }
    onDestroy() {
    }
    get layerType() {
        return this._layerType;
    }
    get layerName() {
        return this.name;
    }
    onAdd(root) {
        root.addChild(this);
        const uiTransform = this.addComponent(UITransform);
        const rootUITransform = root.getComponent(UITransform);
        uiTransform.contentSize.set(rootUITransform.contentSize.width, rootUITransform.contentSize.height);
    }
    onHide() {
        this.active = false;
    }
    onShow() {
        this.active = true;
    }
    onSpAdd(sp) {
        this.addChild(sp);
    }
    onNodeAdd(node) {
        if (node.parent && node.parent === this)
            return;
        this.addChild(node);
    }
}

export { Layer, NodeCtrl };

    
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgubWpzIiwic291cmNlcyI6WyJAYWlsaGMvZHBjdHJsLWMzZC9zcmMvbm9kZS1jdHJsLnRzIiwiQGFpbGhjL2RwY3RybC1jM2Qvc3JjL2xheWVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IH0gZnJvbSBcIkBhaWxoYy9kaXNwbGF5LWN0cmxcIjtcclxuaW1wb3J0IHsgTm9kZSB9IGZyb20gXCJjY1wiO1xyXG5leHBvcnQgY2xhc3MgTm9kZUN0cmwgaW1wbGVtZW50cyBkaXNwbGF5Q3RybC5JQ3RybDxOb2RlPiB7XHJcbiAgICBrZXk/OiBzdHJpbmcgfCBhbnk7XHJcblxyXG4gICAgaXNMb2FkaW5nPzogYm9vbGVhbjtcclxuICAgIGlzTG9hZGVkPzogYm9vbGVhbjtcclxuICAgIGlzSW5pdGVkPzogYm9vbGVhbjtcclxuICAgIGlzU2hvd2VkPzogYm9vbGVhbjtcclxuICAgIG5lZWRTaG93PzogYm9vbGVhbjtcclxuICAgIG5lZWRMb2FkPzogYm9vbGVhbjtcclxuICAgIGlzU2hvd2luZz86IGJvb2xlYW47XHJcbiAgICB2aXNpYmxlOiBib29sZWFuO1xyXG4gICAgb25Mb2FkRGF0YTogYW55O1xyXG4gICAgcHJvdGVjdGVkIG5vZGU6IE5vZGU7XHJcbiAgICBwcm90ZWN0ZWQgX21ncjogZGlzcGxheUN0cmwuSU1ncjtcclxuICAgIGNvbnN0cnVjdG9yKGRwY01ncj86IGRpc3BsYXlDdHJsLklNZ3IpIHtcclxuICAgICAgICB0aGlzLl9tZ3IgPSBkcGNNZ3I7XHJcbiAgICB9XHJcbiAgICBvbkluaXQoY29uZmlnPzogZGlzcGxheUN0cmwuSUluaXRDb25maWc8YW55LCBhbnk+KTogdm9pZCB7XHJcblxyXG4gICAgfVxyXG4gICAgb25TaG93KGNvbmZpZz86IGRpc3BsYXlDdHJsLklTaG93Q29uZmlnPGFueSwgYW55LCBhbnk+KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMubm9kZSkge1xyXG4gICAgICAgICAgICB0aGlzLm5vZGUuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25VcGRhdGUodXBkYXRlRGF0YTogYW55KTogdm9pZCB7XHJcbiAgICB9XHJcbiAgICBnZXRSZXNzKCk6IGFueVtdIHwgc3RyaW5nW10ge1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICBnZXROb2RlKCk6IE5vZGUge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5vZGU7XHJcbiAgICB9XHJcbiAgICBnZXRGYWNlPFQgPSBhbnk+KCk6IFQge1xyXG4gICAgICAgIHJldHVybiB0aGlzIGFzIGFueTtcclxuICAgIH1cclxuICAgIG9uRGVzdHJveShkZXN0cm95UmVzPzogYm9vbGVhbik6IHZvaWQge1xyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgb25IaWRlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm5vZGUpIHtcclxuICAgICAgICAgICAgdGhpcy5ub2RlLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZvcmNlSGlkZSgpIHtcclxuICAgICAgICB0aGlzLm5vZGUgJiYgKHRoaXMubm9kZS5hY3RpdmUgPSBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5pc1Nob3dlZCA9IGZhbHNlXHJcbiAgICB9XHJcbiAgICBvblJlc2l6ZSgpIHtcclxuICAgIH1cclxufSIsImltcG9ydCB7IH0gZnJvbSBcIkBhaWxoYy9sYXllclwiXG5pbXBvcnQgeyBOb2RlLCBVSVRyYW5zZm9ybSB9IGZyb20gXCJjY1wiO1xuZXhwb3J0IGNsYXNzIExheWVyIGV4dGVuZHMgTm9kZSBpbXBsZW1lbnRzIGxheWVyLklMYXllciB7XG5cblxuXG4gICAgcHJvdGVjdGVkIF9sYXllclR5cGU6IG51bWJlcjtcbiAgICBwcm90ZWN0ZWQgX2xheWVyTWdyOiBsYXllci5JTWdyPE5vZGU+O1xuXG4gICAgb25Jbml0KGxheWVyTmFtZTogc3RyaW5nLCBsYXllclR5cGU6IG51bWJlclxuICAgICAgICAsIGxheWVyTWdyOiBsYXllci5JTWdyPE5vZGU+KTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2xheWVyVHlwZSA9IGxheWVyVHlwZTtcbiAgICAgICAgdGhpcy5uYW1lID0gbGF5ZXJOYW1lO1xuICAgICAgICB0aGlzLl9sYXllck1nciA9IGxheWVyTWdyO1xuICAgIH1cbiAgICBvbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgfVxuICAgIHB1YmxpYyBnZXQgbGF5ZXJUeXBlKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sYXllclR5cGU7XG4gICAgfVxuICAgIGdldCBsYXllck5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgICB9XG4gICAgb25BZGQocm9vdDogTm9kZSkge1xuICAgICAgICByb290LmFkZENoaWxkKHRoaXMpO1xuICAgICAgICBjb25zdCB1aVRyYW5zZm9ybSA9IHRoaXMuYWRkQ29tcG9uZW50KFVJVHJhbnNmb3JtKTtcbiAgICAgICAgY29uc3Qgcm9vdFVJVHJhbnNmb3JtID0gcm9vdC5nZXRDb21wb25lbnQoVUlUcmFuc2Zvcm0pO1xuICAgICAgICB1aVRyYW5zZm9ybS5jb250ZW50U2l6ZS5zZXQocm9vdFVJVHJhbnNmb3JtLmNvbnRlbnRTaXplLndpZHRoLCByb290VUlUcmFuc2Zvcm0uY29udGVudFNpemUuaGVpZ2h0KTtcbiAgICB9XG4gICAgb25IaWRlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgIH1cbiAgICBvblNob3coKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgICB9XG4gICAgb25TcEFkZChzcDogTm9kZSk6IHZvaWQge1xuICAgICAgICB0aGlzLmFkZENoaWxkKHNwKTtcbiAgICB9XG4gICAgb25Ob2RlQWRkKG5vZGU6IE5vZGUpOiB2b2lkIHtcbiAgICAgICAgaWYgKG5vZGUucGFyZW50ICYmIG5vZGUucGFyZW50ID09PSB0aGlzKSBy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
