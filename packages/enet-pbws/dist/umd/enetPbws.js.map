{"version":3,"file":"enetPbws.js","sources":["@ailhc/enet-pbws/src/byte.ts","@ailhc/enet-pbws/src/pkg-type.ts","@ailhc/enet-pbws/src/pb-proto-handler.ts"],"sourcesContent":["/**\n * <p> <code>Byte</code> 类提供用于优化读取、写入以及处理二进制数据的方法和属性。</p>\n * <p> <code>Byte</code> 类适用于需要在字节层访问数据的高级开发人员。</p>\n */\nexport class Byte {\n\n    /**\n     * <p>主机字节序，是 CPU 存放数据的两种不同顺序，包括小端字节序和大端字节序。通过 <code>getSystemEndian</code> 可以获取当前系统的字节序。</p>\n     * <p> <code>BIG_ENDIAN</code> ：大端字节序，地址低位存储值的高位，地址高位存储值的低位。有时也称之为网络字节序。<br/>\n     * <code>LITTLE_ENDIAN</code> ：小端字节序，地址低位存储值的低位，地址高位存储值的高位。</p>\n     */\n    static BIG_ENDIAN: string = \"bigEndian\";\n    /**\n     * <p>主机字节序，是 CPU 存放数据的两种不同顺序，包括小端字节序和大端字节序。通过 <code>getSystemEndian</code> 可以获取当前系统的字节序。</p>\n     * <p> <code>LITTLE_ENDIAN</code> ：小端字节序，地址低位存储值的低位，地址高位存储值的高位。<br/>\n     * <code>BIG_ENDIAN</code> ：大端字节序，地址低位存储值的高位，地址高位存储值的低位。有时也称之为网络字节序。</p>\n     */\n    static LITTLE_ENDIAN: string = \"littleEndian\";\n    /**@private */\n    private static _sysEndian: string = null;\n    /**@private 是否为小端数据。*/\n    protected _xd_: boolean = true;\n    /**@private */\n    private _allocated_: number = 8;\n    /**@private 原始数据。*/\n    protected _d_: any\n    /**@private DataView*/\n    protected _u8d_: any;\n    /**@private */\n    protected _pos_: number = 0;\n    /**@private */\n    protected _length: number = 0;\n\n    /**\n     * <p>获取当前主机的字节序。</p>\n     * <p>主机字节序，是 CPU 存放数据的两种不同顺序，包括小端字节序和大端字节序。</p>\n     * <p> <code>BIG_ENDIAN</code> ：大端字节序，地址低位存储值的高位，地址高位存储值的低位。有时也称之为网络字节序。<br/>\n     * <code>LITTLE_ENDIAN</code> ：小端字节序，地址低位存储值的低位，地址高位存储值的高位。</p>\n     * @return 当前系统的字节序。\n     */\n    static getSystemEndian(): string {\n        if (!Byte._sysEndian) {\n            var buffer: any = new ArrayBuffer(2);\n            new DataView(buffer).setInt16(0, 256, true);\n            Byte._sysEndian = (new Int16Array(buffer))[0] === 256 ? Byte.LITTLE_ENDIAN : Byte.BIG_ENDIAN;\n        }\n        return Byte._sysEndian;\n    }\n\n    /**\n     * 创建一个 <code>Byte</code> 类的实例。\n     * @param\tdata\t用于指定初始化的元素数目，或者用于初始化的TypedArray对象、ArrayBuffer对象。如果为 null ，则预分配一定的内存空间，当可用空间不足时，优先使用这部分内存，如果还不够，则重新分配所需内存。\n     */\n    constructor(data: any = null) {\n        if (data) {\n            this._u8d_ = new Uint8Array(data);\n            this._d_ = new DataView(this._u8d_.buffer);\n            this._length = this._d_.byteLength;\n        } else {\n            this._resizeBuffer(this._allocated_);\n        }\n    }\n\n    /**\n     * 获取此对象的 ArrayBuffer 数据，数据只包含有效数据部分。\n     */\n    get buffer(): ArrayBuffer {\n        var rstBuffer: ArrayBuffer = this._d_.buffer;\n        if (rstBuffer.byteLength === this._length) return rstBuffer;\n        return rstBuffer.slice(0, this._length);\n    }\n\n    /**\n     * <p> <code>Byte</code> 实例的字节序。取值为：<code>BIG_ENDIAN</code> 或 <code>BIG_ENDIAN</code> 。</p>\n     * <p>主机字节序，是 CPU 存放数据的两种不同顺序，包括小端字节序和大端字节序。通过 <code>getSystemEndian</code> 可以获取当前系统的字节序。</p>\n     * <p> <code>BIG_ENDIAN</code> ：大端字节序，地址低位存储值的高位，地址高位存储值的低位。有时也称之为网络字节序。<br/>\n     *  <code>LITTLE_ENDIAN</code> ：小端字节序，地址低位存储值的低位，地址高位存储值的高位。</p>\n     */\n    get endian(): string {\n        return this._xd_ ? Byte.LITTLE_ENDIAN : Byte.BIG_ENDIAN;\n    }\n\n    set endian(value: string) {\n        this._xd_ = (value === Byte.LITTLE_ENDIAN);\n    }\n\n    /**\n     * <p> <code>Byte</code> 对象的长度（以字节为单位）。</p>\n     * <p>如果将长度设置为大于当前长度的值，则用零填充字节数组的右侧；如果将长度设置为小于当前长度的值，将会截断该字节数组。</p>\n     * <p>如果要设置的长度大于当前已分配的内存空间的字节长度，则重新分配内存空间，大小为以下两者较大者：要设置的长度、当前已分配的长度的2倍，并将原有数据拷贝到新的内存空间中；如果要设置的长度小于当前已分配的内存空间的字节长度，也会重新分配内存空间，大小为要设置的长度，并将原有数据从头截断为要设置的长度存入新的内存空间中。</p>\n     */\n    set length(value: number) {\n        if (this._allocated_ < value) this._resizeBuffer(this._allocated_ = Math.floor(Math.max(value, this._allocated_ * 2)));\n        else if (this._allocated_ > value) this._resizeBuffer(this._allocated_ = value);\n        this._length = value;\n    }\n\n    get length(): number {\n        return this._length;\n    }\n\n    /**@private */\n    private _resizeBuffer(len: number): void {\n        try {\n            var newByteView: any = new Uint8Array(len);\n            if (this._u8d_ != null) {\n                if (this._u8d_.length <= len) newByteView.set(this._u8d_);\n                else newByteView.set(this._u8d_.subarray(0, len));\n            }\n            this._u8d_ = newByteView;\n            this._d_ = new DataView(newByteView.buffer);\n        } catch (err) {\n            throw \"Invalid typed array length:\" + len;\n        }\n    }\n\n    /**\n     * <p>常用于解析固定格式的字节流。</p>\n     * <p>先从字节流的当前字节偏移位置处读取一个 <code>Uint16</code> 值，然后以此值为长度，读取此长度的字符串。</p>\n     * @return 读取的字符串。\n     */\n    readString(): string {\n        return this._rUTF(this.readUint16());\n    }\n\n    /**\n     * 从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Float32Array</code> 对象并返回此对象。\n     * @param\tstart\t开始位置。\n     * @param\tlen\t\t需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。\n     * @return  读取的 Float32Array 对象。\n     */\n    readFloat32Array(start: number, len: number): any {\n        var end: number = start + len;\n        end = (end > this._length) ? this._length : end;\n        var v: any = new Float32Array(this._d_.buffer.slice(start, end));\n        this._pos_ = end;\n        return v;\n    }\n\n    /**\n     * 从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Uint8Array</code> 对象并返回此对象。\n     * @param\tstart\t开始位置。\n     * @param\tlen\t\t需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。\n     * @return  读取的 Uint8Array 对象。\n     */\n    readUint8Array(start: number, len: number): Uint8Array {\n        var end: number = start + len;\n        end = (end > this._length) ? this._length : end;\n        var v: any = new Uint8Array(this._d_.buffer.slice(start, end));\n        this._pos_ = end;\n        return v;\n    }\n\n    /**\n     * 从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Int16Array</code> 对象并返回此对象。\n     * @param\tstart\t开始读取的字节偏移量位置。\n     * @param\tlen\t\t需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。\n     * @return  读取的 Uint8Array 对象。\n     */\n    readInt16Array(start: number, len: number): any {\n        var end: number = start + len;\n        end = (end > this._length) ? this._length : end;\n        var v: any = new Int16Array(this._d_.buffer.slice(start, end));\n        this._pos_ = end;\n        return v;\n    }\n\n    /**\n     * 从字节流的当前字节偏移位置处读取一个 IEEE 754 单精度（32 位）浮点数。\n     * @return 单精度（32 位）浮点数。\n     */\n    readFloat32(): number {\n        if (this._pos_ + 4 > this._length) throw \"getFloat32 error - Out of bounds\";\n        var v: number = this._d_.getFloat32(this._pos_, this._xd_);\n        this._pos_ += 4;\n        return v;\n    }\n\n    /**\n     * 从字节流的当前字节偏移量位置处读取一个 IEEE 754 双精度（64 位）浮点数。\n     * @return 双精度（64 位）浮点数。\n     */\n    readFloat64(): number {\n        if (this._pos_ + 8 > this._length) throw \"getFloat64 error - Out of bounds\";\n        var v: number = this._d_.getFloat64(this._pos_, this._xd_);\n        this._pos_ += 8;\n        return v;\n    }\n\n    /**\n     * 在字节流的当前字节偏移量位置处写入一个 IEEE 754 单精度（32 位）浮点数。\n     * @param\tvalue\t单精度（32 位）浮点数。\n     */\n    writeFloat32(value: number): void {\n        this._ensureWrite(this._pos_ + 4);\n        this._d_.setFloat32(this._pos_, value, this._xd_);\n        this._pos_ += 4;\n    }\n\n    /**\n     * 在字节流的当前字节偏移量位置处写入一个 IEEE 754 双精度（64 位）浮点数。\n     * @param\tvalue\t双精度（64 位）浮点数。\n     */\n    writeFloat64(value: number): void {\n        this._ensureWrite(this._pos_ + 8);\n        this._d_.setFloat64(this._pos_, value, this._xd_);\n        this._pos_ += 8;\n    }\n\n    /**\n     * 从字节流的当前字节偏移量位置处读取一个 Int32 值。\n     * @return Int32 值。\n     */\n    readInt32(): number {\n        if (this._pos_ + 4 > this._length) throw \"getInt32 error - Out of bounds\";\n        var float: number = this._d_.getInt32(this._pos_, this._xd_);\n        this._pos_ += 4;\n        return float;\n    }\n\n    /**\n     * 从字节流的当前字节偏移量位置处读取一个 Uint32 值。\n     * @return Uint32 值。\n     */\n    readUint32(): number {\n        if (this._pos_ + 4 > this._length) throw \"getUint32 error - Out of bounds\";\n        var v: number = this._d_.getUint32(this._pos_, this._xd_);\n        this._pos_ += 4;\n        return v;\n    }\n    /**\n     * 从字节流的当前字节偏移量位置处读取一个 Uint32 值。读不到不报错，返回undefined;\n     * @return Uint32 值。\n     */\n    readUint32NoError(): number {\n        if (this._pos_ + 4 > this._length) return undefined;\n        var v: number = this._d_.getUint32(this._pos_, this._xd_);\n        this._pos_ += 4;\n        return v;\n    }\n\n    /**\n     * 在字节流的当前字节偏移量位置处写入指定的 Int32 值。\n     * @param\tvalue\t需要写入的 Int32 值。\n     */\n    writeInt32(value: number): void {\n        this._ensureWrite(this._pos_ + 4);\n        this._d_.setInt32(this._pos_, value, this._xd_);\n        this._pos_ += 4;\n    }\n\n    /**\n     * 在字节流的当前字节偏移量位置处写入 Uint32 值。\n     * @param\tvalue\t需要写入的 Uint32 值。\n     */\n    writeUint32(value: number): void {\n        this._ensureWrite(this._pos_ + 4);\n        this._d_.setUint32(this._pos_, value, this._xd_);\n        this._pos_ += 4;\n    }\n\n    /**\n     * 从字节流的当前字节偏移量位置处读取一个 Int16 值。\n     * @return Int16 值。\n     */\n    readInt16(): number {\n        if (this._pos_ + 2 > this._length) throw \"getInt16 error - Out of bounds\";\n        var us: number = this._d_.getInt16(this._pos_, this._xd_);\n        this._pos_ += 2;\n        return us;\n    }\n\n    /**\n     * 从字节流的当前字节偏移量位置处读取一个 Uint16 值。\n     * @return Uint16 值。\n     */\n    readUint16(): number {\n        if (this._pos_ + 2 > this._length) throw \"getUint16 error - Out of bounds\";\n        var us: number = this._d_.getUint16(this._pos_, this._xd_);\n        this._pos_ += 2;\n        return us;\n    }\n\n    /**\n     * 在字节流的当前字节偏移量位置处写入指定的 Uint16 值。\n     * @param\tvalue\t需要写入的Uint16 值。\n     */\n    writeUint16(value: number): void {\n        this._ensureWrite(this._pos_ + 2);\n        this._d_.setUint16(this._pos_, value, this._xd_);\n        this._pos_ += 2;\n    }\n\n    /**\n     * 在字节流的当前字节偏移量位置处写入指定的 Int16 值。\n     * @param\tvalue\t需要写入的 Int16 值。\n     */\n    writeInt16(value: number): void {\n        this._ensureWrite(this._pos_ + 2);\n        this._d_.setInt16(this._pos_, value, this._xd_);\n        this._pos_ += 2;\n    }\n\n    /**\n     * 从字节流的当前字节偏移量位置处读取一个 Uint8 值。\n     * @return Uint8 值。\n     */\n    readUint8(): number {\n        if (this._pos_ + 1 > this._length) throw \"getUint8 error - Out of bounds\";\n        return this._u8d_[this._pos_++];\n    }\n\n    /**\n     * 在字节流的当前字节偏移量位置处写入指定的 Uint8 值。\n     * @param\tvalue\t需要写入的 Uint8 值。\n     */\n    writeUint8(value: number): void {\n        this._ensureWrite(this._pos_ + 1);\n        this._d_.setUint8(this._pos_, value);\n        this._pos_++;\n    }\n\n    /**\n     * @internal\n     * 从字节流的指定字节偏移量位置处读取一个 Uint8 值。\n     * @param\tpos\t字节读取位置。\n     * @return Uint8 值。\n     */\n    //TODO:coverage\n    _readUInt8(pos: number): number {\n        return this._d_.getUint8(pos);\n    }\n\n    /**\n     * @internal\n     * 从字节流的指定字节偏移量位置处读取一个 Uint16 值。\n     * @param\tpos\t字节读取位置。\n     * @return Uint16 值。\n     */\n    //TODO:coverage\n    _readUint16(pos: number): number {\n        return this._d_.getUint16(pos, this._xd_);\n    }\n\n    /**\n     * @private\n     * 读取指定长度的 UTF 型字符串。\n     * @param\tlen 需要读取的长度。\n     * @return 读取的字符串。\n     */\n    private _rUTF(len: number): string {\n        var v: string = \"\", max: number = this._pos_ + len, c: number, c2: number, c3: number, f: Function = String.fromCharCode;\n        var u: any = this._u8d_, i: number = 0;\n        var strs: any[] = [];\n        var n: number = 0;\n        strs.length = 1000;\n        while (this._pos_ < max) {\n            c = u[this._pos_++];\n            if (c < 0x80) {\n                if (c != 0)\n                    //v += f(c);\\\n                    strs[n++] = f(c);\n            } else if (c < 0xE0) {\n                //v += f(((c & 0x3F) << 6) | (u[_pos_++] & 0x7F));\n                strs[n++] = f(((c & 0x3F) << 6) | (u[this._pos_++] & 0x7F));\n            } else if (c < 0xF0) {\n                c2 = u[this._pos_++];\n                //v += f(((c & 0x1F) << 12) | ((c2 & 0x7F) << 6) | (u[_pos_++] & 0x7F));\n                strs[n++] = f(((c & 0x1F) << 12) | ((c2 & 0x7F) << 6) | (u[this._pos_++] & 0x7F));\n            } else {\n                c2 = u[this._pos_++];\n                c3 = u[this._pos_++];\n                //v += f(((c & 0x0F) << 18) | ((c2 & 0x7F) << 12) | ((c3 << 6) & 0x7F) | (u[_pos_++] & 0x7F));\n                const _code = ((c & 0x0F) << 18) | ((c2 & 0x7F) << 12) | ((c3 & 0x7F) << 6) | (u[this._pos_++] & 0x7F);\n                if (_code >= 0x10000) {\n                    const _offset = _code - 0x10000;\n                    const _lead = 0xd800 | (_offset >> 10);\n                    const _trail = 0xdc00 | (_offset & 0x3ff);\n                    strs[n++] = f(_lead);\n                    strs[n++] = f(_trail);\n                }\n                else {\n                    strs[n++] = f(_code);\n                }\n            }\n            i++;\n        }\n        strs.length = n;\n        return strs.join('');\n        //return v;\n    }\n\n    /**\n     * @private\n     * 读取 <code>len</code> 参数指定的长度的字符串。\n     * @param\tlen\t要读取的字符串的长度。\n     * @return 指定长度的字符串。\n     */\n    //TODO:coverage\n    readCustomString(len: number): string {\n        var v: string = \"\", ulen: number = 0, c: number, c2: number, f: Function = String.fromCharCode;\n        var u: any = this._u8d_, i: number = 0;\n        while (len > 0) {\n            c = u[this._pos_];\n            if (c < 0x80) {\n                v += f(c);\n                this._pos_++;\n                len--;\n            } else {\n                ulen = c - 0x80;\n                this._pos_++;\n                len -= ulen;\n                while (ulen > 0) {\n                    c = u[this._pos_++];\n                    c2 = u[this._pos_++];\n                    v += f((c2 << 8) | c);\n                    ulen--;\n                }\n            }\n        }\n\n        return v;\n    }\n\n    /**\n     * 移动或返回 Byte 对象的读写指针的当前位置（以字节为单位）。下一次调用读取方法时将在此位置开始读取，或者下一次调用写入方法时将在此位置开始写入。\n     */\n    get pos(): number {\n        return this._pos_;\n    }\n\n    set pos(value: number) {\n        this._pos_ = value;\n        //$MOD byteOffset是只读的，这里进行赋值没有意义。\n        //_d_.byteOffset = value;\n    }\n\n    /**\n     * 可从字节流的当前位置到末尾读取的数据的字节数。\n     */\n    get bytesAvailable(): number {\n        return this._length - this._pos_;\n    }\n\n    /**\n     * 清除字节数组的内容，并将 length 和 pos 属性重置为 0。调用此方法将释放 Byte 实例占用的内存。\n     */\n    clear(): void {\n        this._pos_ = 0;\n        this.length = 0;\n    }\n\n    /**\n     * @internal\n     * 获取此对象的 ArrayBuffer 引用。\n     * @return\n     */\n    __getBuffer(): ArrayBuffer {\n        //this._d_.buffer.byteLength = this.length;\n        return this._d_.buffer;\n    }\n\n    /**\n     * <p>将 UTF-8 字符串写入字节流。类似于 writeUTF() 方法，但 writeUTFBytes() 不使用 16 位长度的字为字符串添加前缀。</p>\n     * <p>对应的读取方法为： getUTFBytes 。</p>\n     * @param value 要写入的字符串。\n     */\n    writeUTFBytes(value: string): void {\n        // utf8-decode\n        value = value + \"\";\n        for (var i: number = 0, sz: number = value.length; i < sz; i++) {\n            var c: number = value.charCodeAt(i);\n\n            if (c <= 0x7F) {\n                this.writeByte(c);\n            } else if (c <= 0x7FF) {\n                //优化为直接写入多个字节，而不必重复调用writeByte，免去额外的调用和逻辑开销。\n                this._ensureWrite(this._pos_ + 2);\n                this._u8d_.set([0xC0 | (c >> 6), 0x80 | (c & 0x3F)], this._pos_);\n                this._pos_ += 2;\n            } else if (c >= 0xD800 && c <= 0xDBFF) {\n                i++;\n                const c2 = value.charCodeAt(i);\n                if (!Number.isNaN(c2) && c2 >= 0xDC00 && c2 <= 0xDFFF) {\n                    const _p1 = (c & 0x3FF) + 0x40;\n                    const _p2 = c2 & 0x3FF;\n\n                    const _b1 = 0xF0 | ((_p1 >> 8) & 0x3F);\n                    const _b2 = 0x80 | ((_p1 >> 2) & 0x3F);\n                    const _b3 = 0x80 | ((_p1 & 0x3) << 4) | ((_p2 >> 6) & 0xF);\n                    const _b4 = 0x80 | (_p2 & 0x3F);\n\n                    this._ensureWrite(this._pos_ + 4);\n                    this._u8d_.set([_b1, _b2, _b3, _b4], this._pos_);\n                    this._pos_ += 4;\n                }\n            } else if (c <= 0xFFFF) {\n                this._ensureWrite(this._pos_ + 3);\n                this._u8d_.set([0xE0 | (c >> 12), 0x80 | ((c >> 6) & 0x3F), 0x80 | (c & 0x3F)], this._pos_);\n                this._pos_ += 3;\n            } else {\n                this._ensureWrite(this._pos_ + 4);\n                this._u8d_.set([0xF0 | (c >> 18), 0x80 | ((c >> 12) & 0x3F), 0x80 | ((c >> 6) & 0x3F), 0x80 | (c & 0x3F)], this._pos_);\n                this._pos_ += 4;\n            }\n        }\n    }\n\n    /**\n     * <p>将 UTF-8 字符串写入字节流。先写入以字节表示的 UTF-8 字符串长度（作为 16 位整数），然后写入表示字符串字符的字节。</p>\n     * <p>对应的读取方法为： getUTFString 。</p>\n     * @param\tvalue 要写入的字符串值。\n     */\n    writeUTFString(value: string): void {\n        var tPos: number = this.pos;\n        this.writeUint16(1);\n        this.writeUTFBytes(value);\n        var dPos: number = this.pos - tPos - 2;\n        //trace(\"writeLen:\",dPos,\"pos:\",tPos);\n        this._d_.setUint16(tPos, dPos, this._xd_);\n    }\n\n    /**\n     * <p>将 UTF-8 字符串写入字节流。先写入以字节表示的 UTF-8 字符串长度（作为 32 位整数），然后写入表示字符串字符的字节。</p>\n     * @param\tvalue 要写入的字符串值。\n     */\n    writeUTFString32(value: string): void {\n        var tPos = this.pos;\n        this.writeUint32(1);\n        this.writeUTFBytes(value);\n        var dPos = this.pos - tPos - 4;\n        //trace(\"writeLen:\",dPos,\"pos:\",tPos);\n        this._d_.setUint32(tPos, dPos, this._xd_);\n    }\n\n\n    /**\n     * @private\n     * 读取 UTF-8 字符串。\n     * @return 读取的字符串。\n     */\n    readUTFString(): string {\n        //var tPos:int = pos;\n        //var len:int = getUint16();\n        ////trace(\"readLen:\"+len,\"pos,\",tPos);\n        return this.readUTFBytes(this.readUint16());\n    }\n\n    /**\n     * @private\n     */\n    readUTFString32(): string {\n        return this.readUTFBytes(this.readUint32());\n    }\n\n    /**\n     * @private\n     * 读字符串，必须是 writeUTFBytes 方法写入的字符串。\n     * @param len\t要读的buffer长度，默认将读取缓冲区全部数据。\n     * @return 读取的字符串。\n     */\n    readUTFBytes(len: number = -1): string {\n        if (len === 0) return \"\";\n        var lastBytes: number = this.bytesAvailable;\n        if (len > lastBytes) throw \"readUTFBytes error - Out of bounds\";\n        len = len > 0 ? len : lastBytes;\n        return this._rUTF(len);\n    }\n\n    /**\n     * <p>在字节流中写入一个字节。</p>\n     * <p>使用参数的低 8 位。忽略高 24 位。</p>\n     * @param\tvalue\n     */\n    writeByte(value: number): void {\n        this._ensureWrite(this._pos_ + 1);\n        this._d_.setInt8(this._pos_, value);\n        this._pos_ += 1;\n    }\n\n    /**\n     * <p>从字节流中读取带符号的字节。</p>\n     * <p>返回值的范围是从 -128 到 127。</p>\n     * @return 介于 -128 和 127 之间的整数。\n     */\n    readByte(): number {\n        if (this._pos_ + 1 > this._length) throw \"readByte error - Out of bounds\";\n        return this._d_.getInt8(this._pos_++);\n    }\n\n    /**\n     * @internal\n     * <p>保证该字节流的可用长度不小于 <code>lengthToEnsure</code> 参数指定的值。</p>\n     * @param\tlengthToEnsure\t指定的长度。\n     */\n    _ensureWrite(lengthToEnsure: number): void {\n        if (this._length < lengthToEnsure) this._length = lengthToEnsure;\n        if (this._allocated_ < lengthToEnsure) this.length = lengthToEnsure;\n    }\n\n    /**\n     * <p>将指定 arraybuffer 对象中的以 offset 为起始偏移量， length 为长度的字节序列写入字节流。</p>\n     * <p>如果省略 length 参数，则使用默认长度 0，该方法将从 offset 开始写入整个缓冲区；如果还省略了 offset 参数，则写入整个缓冲区。</p>\n     * <p>如果 offset 或 length 小于0，本函数将抛出异常。</p>\n     * @param\tarraybuffer\t需要写入的 Arraybuffer 对象。\n     * @param\toffset\t\tArraybuffer 对象的索引的偏移量（以字节为单位）\n     * @param\tlength\t\t从 Arraybuffer 对象写入到 Byte 对象的长度（以字节为单位）\n     */\n    writeArrayBuffer(arraybuffer: any, offset: number = 0, length: number = 0): void {\n        if (offset < 0 || length < 0) throw \"writeArrayBuffer error - Out of bounds\";\n        if (length == 0) length = arraybuffer.byteLength - offset;\n        this._ensureWrite(this._pos_ + length);\n        var uint8array: any = new Uint8Array(arraybuffer);\n        this._u8d_.set(uint8array.subarray(offset, offset + length), this._pos_);\n        this._pos_ += length;\n    }\n    /**\n    *<p>将指定 Uint8Array 对象中的以 offset 为起始偏移量， length 为长度的字节序列写入字节流。</p>\n    *<p>如果省略 length 参数，则使用默认长度 0，该方法将从 offset 开始写入整个缓冲区；如果还省略了 offset 参数，则写入整个缓冲区。</p>\n    *<p>如果 offset 或 length 小于0，本函数将抛出异常。</p>\n    *@param uint8Array 需要写入的 Uint8Array 对象。\n    *@param offset Uint8Array 对象的索引的偏移量（以字节为单位）\n    *@param length 从 Uint8Array 对象写入到 Byte 对象的长度（以字节为单位）\n    */\n    public writeUint8Array(uint8Array: Uint8Array, offset?: number, length?: number) {\n        (offset === void 0) && (offset = 0);\n        (length === void 0) && (length = 0);\n        if (offset < 0 || length < 0) throw \"writeArrayBuffer error - Out of bounds\";\n        if (length === 0) length = uint8Array.byteLength - offset;\n        this._ensureWrite(this._pos_ + length);\n        this._u8d_.set(uint8Array.subarray(offset, offset + length), this._pos_);\n        this._pos_ += length;\n    }\n    /**\n     * 读取ArrayBuffer数据\n     * @param\tlength\n     * @return\n     */\n    readArrayBuffer(length: number): ArrayBuffer {\n        var rst: ArrayBuffer;\n        rst = this._u8d_.buffer.slice(this._pos_, this._pos_ + length);\n        this._pos_ = this._pos_ + length\n        return rst;\n    }\n}","export enum PackageType {\n    /**握手 */\n    HANDSHAKE = 1,\n    /**握手回应 */\n    HANDSHAKE_ACK = 2,\n    /**心跳 */\n    HEARTBEAT = 3,\n    /**数据 */\n    DATA = 4,\n    /**踢下线 */\n    KICK = 5\n}","import {} from \"@ailhc/enet\";\nimport { PackageType } from \"./pkg-type\";\nimport { Byte } from \"./byte\";\n\ndeclare global {\n    interface IHandShakeReq {\n        sys?: {\n            /**客户端类型 */\n            type?: number | string;\n            /**客户端版本 */\n            version?: number | string;\n            /**协议版本 */\n            protoVersion?: number | string;\n            /**rsa 校验 */\n            rsa?: any;\n        };\n        user?: any;\n    }\n    /**\n     * 默认数据包协议key，有就做数据协议编码，没有就不做数据协议编码\n     */\n    // interface IPackageTypeProtoKeyMap {\n    //     /**握手请求协议key */\n    //     handshakeReqProtoKey?: string\n    //     /**握手返回协议key */\n    //     handshakeResProtoKey?: string\n    //     /**握手回应协议key */\n    //     handshakeAckProtoKey?: string\n    //     /**心跳发送协议key */\n    //     heartbeatReqProtoKey?: string\n    //     /**心跳推送协议key */\n    //     heartbeatPushProtoKey?: string\n    //     /**被踢推送的协议key */\n    //     kickPushProtoKey?: string\n    // }\n    interface IPackageTypeProtoKeyMap {\n        [key: number]: IPackageTypeProtoKey;\n    }\n    interface IPackageTypeProtoKey {\n        type: PackageType;\n        encode?: string;\n        decode?: string;\n    }\n    interface IPbProtoIns {\n        /**\n         * 编码\n         * @param data\n         */\n        encode(data: any): protobuf.Writer;\n        /**\n         * 解码\n         * @param data\n         */\n        decode(data: Uint8Array): any;\n        /**\n         * 验证\n         * @param data\n         * @returns 如果验证出数据有问题，则会返回错误信息，没问题，返回为空\n         */\n        verify(data: any): any;\n    }\n}\n\nexport class PbProtoHandler implements enet.IProtoHandler {\n    protected _protoMap: { [key: string]: IPbProtoIns };\n    protected _byteUtil: Byte = new Byte();\n    /**数据包类型协议 {PackageType: 对应的协议key} */\n    protected _pkgTypeProtoKeyMap: IPackageTypeProtoKeyMap;\n    protected _handShakeRes: any;\n    /**\n     *\n     * @param pbProtoJs 协议导出js对象\n     * @param pkgTypeProtoKeys 数据包类型协议 {PackageType} 对应的协议key\n     */\n\n    constructor(pbProtoJs: any, pkgTypeProtoKeys?: IPackageTypeProtoKey[]) {\n        if (!pbProtoJs) {\n            throw \"pbProtojs is undefined\";\n        }\n        this._protoMap = pbProtoJs;\n        const pkgTypeProtoKeyMap = {} as any;\n        if (pkgTypeProtoKeys) {\n            for (let i = 0; i < pkgTypeProtoKeys.length; i++) {\n                pkgTypeProtoKeyMap[pkgTypeProtoKeys[i].type] = pkgTypeProtoKeys[i];\n            }\n        }\n        this._pkgTypeProtoKeyMap = pkgTypeProtoKeyMap;\n    }\n    private _heartbeatCfg: enet.IHeartBeatConfig;\n    public get heartbeatConfig(): enet.IHeartBeatConfig {\n        return this._heartbeatCfg;\n    }\n    public get handShakeRes(): any {\n        return this._handShakeRes;\n    }\n    public setHandshakeRes<T>(handShakeRes: T) {\n        this._handShakeRes = handShakeRes;\n        this._heartbeatCfg = handShakeRes as any;\n    }\n    protoKey2Key(protoKey: string): string {\n        return protoKey;\n    }\n    protected _protoEncode<T>(protoKey: string, data: T): Uint8Array {\n        const proto = this._protoMap[protoKey];\n        let buf: Uint8Array;\n        if (!proto) {\n            console.error(`no this proto:${protoKey}`);\n        } else {\n            const err = proto.verify(data);\n            if (!err) {\n                buf = proto.encode(data).finish();\n            } else {\n                console.error(`encode error:`, err);\n            }\n        }\n        return buf;\n    }\n\n    encodePkg<T>(pkg: enet.IPackage<T>, useCrypto?: boolean): enet.NetData {\n        const pkgType = pkg.type;\n        const byteUtil = this._byteUtil;\n        byteUtil.clear();\n        byteUtil.endian = Byte.LITTLE_ENDIAN;\n        byteUtil.writeUint32(pkgType);\n        let protoKey: string;\n        let data: any;\n        if (pkgType === PackageType.DATA) {\n            const msg: enet.IMessage = pkg.data as any;\n            byteUtil.writeUTFString(msg.key);\n            const reqId = msg.reqId;\n            byteUtil.writeUint32(!isNaN(reqId) && reqId > 0 ? reqId : 0);\n            data = msg.data;\n            protoKey = msg.key;\n        } else {\n            const protoKeyMap = this._pkgTypeProtoKeyMap;\n            protoKey = protoKeyMap[pkgType] && protoKeyMap[pkgType].encode;\n            data = pkg.data;\n        }\n        if (protoKey && data) {\n            const dataUint8Array: Uint8Array = this._protoEncode(protoKey, data);\n            if (!dataUint8Array) {\n                byteUtil.clear();\n            } else {\n                byteUtil.writeUint8Array(dataUint8Array);\n            }\n        }\n        const netData = byteUtil.buffer.byteLength ? byteUtil.buffer : undefined;\n        byteUtil.clear();\n        return netData;\n    }\n    encodeMsg<T>(msg: enet.IMessage<T, any>, useCrypto?: boolean): enet.NetData {\n        return this.encodePkg({ type: PackageType.DATA, data: msg }, useCrypto);\n    }\n    decodePkg<T>(data: enet.NetData): enet.IDecodePackage<T> {\n        const byteUtil = this._byteUtil;\n        byteUtil.clear();\n        byteUtil.endian = Byte.LITTLE_ENDIAN;\n        if (data instanceof ArrayBuffer) {\n            byteUtil.writeArrayBuffer(data);\n        } else if (data instanceof Uint8Array) {\n            byteUtil.writeUint8Array(data as Uint8Array);\n        }\n        //位置归零，用于读数据\n        byteUtil.pos = 0;\n        const pkgType = byteUtil.readUint32();\n        let decodePkg: enet.IDecodePackage<T> = {} as any;\n        if (pkgType === PackageType.DATA) {\n            const protoKey = byteUtil.readUTFString();\n            const reqId = byteUtil.readUint32NoError();\n            const dataBytes = byteUtil.readUint8Array(byteUtil.pos, byteUtil.length);\n\n            const proto = this._protoMap[protoKey];\n            decodePkg.reqId = reqId;\n            decodePkg.key = protoKey;\n            if (!proto) {\n                decodePkg.errorMsg = `no this proto:${protoKey}`;\n            } else {\n                const decodeData = proto.decode(dataBytes);\n                const err = proto.verify(decodeData);\n                decodePkg.data = decodeData;\n                decodePkg.errorMsg = err;\n                decodePkg.type = pkgType;\n            }\n        } else {\n            const protoKeyMap = this._pkgTypeProtoKeyMap;\n            const protoKey = protoKeyMap[pkgType] && protoKeyMap[pkgType].decode;\n            decodePkg.key = protoKey;\n            if (protoKey) {\n                const dataBytes = byteUtil.readUint8Array(byteUtil.pos, byteUtil.length);\n                const proto = this._protoMap[protoKey];\n                if (!proto) {\n                    decodePkg.errorMsg = `no this proto:${protoKey}`;\n                } else {\n                    const decodeData = proto.decode(dataBytes);\n                    const err = proto.verify(decodeData);\n                    decodePkg.data = decodeData;\n                    decodePkg.errorMsg = err;\n                    decodePkg.type = pkgType;\n                }\n            }\n            if (pkgType === PackageType.HANDSHAKE) {\n                this.setHandshakeRes(decodePkg.data);\n            }\n        }\n\n        return decodePkg;\n    }\n}\n"],"names":["PackageType"],"mappings":"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"}