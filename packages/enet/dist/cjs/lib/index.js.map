{"version":3,"file":"index.js","sources":["../../../src/socketStateType.ts","../../../src/wsocket.ts","../../../src/net-node.ts"],"sourcesContent":["export enum SocketState {\n    /**连接中 */\n    CONNECTING,\n    /**打开 */\n    OPEN,\n    /**关闭中 */\n    CLOSING,\n    /**关闭了 */\n    CLOSED\n}","import { SocketState } from \"./socketStateType\";\n\nexport class WSocket implements enet.ISocket {\n\n    private _sk: WebSocket;\n    private _eventHandler: enet.ISocketEventHandler;\n    public get state(): SocketState {\n        return this._sk ? this._sk.readyState : SocketState.CLOSED;\n    }\n    public get isConnected(): boolean {\n        return this._sk ? this._sk.readyState === SocketState.OPEN : false;\n    }\n    setEventHandler(handler: enet.ISocketEventHandler): void {\n        this._eventHandler = handler;\n    }\n    connect(opt: enet.IConnectOptions): boolean {\n        let url = opt.url;\n        if (!url) {\n            if (opt.host && opt.port) {\n                url = `${opt.protocol ? \"wss\" : \"ws\"}://${opt.host}:${opt.port}`;\n            } else {\n                return false;\n            }\n        }\n        if (this._sk) {\n            this.close();\n        }\n        if (!this._sk) {\n\n            this._sk = new WebSocket(url);\n            if (!opt.binaryType) {\n                opt.binaryType = \"arraybuffer\";\n            }\n            this._sk.binaryType = opt.binaryType;\n            this._sk.onclose = this._eventHandler?.onSocketClosed && this._eventHandler?.onSocketClosed\n            this._sk.onerror = this._eventHandler?.onSocketError && this._eventHandler?.onSocketError;\n            this._sk.onmessage = this._eventHandler?.onSocketMsg && this._eventHandler?.onSocketMsg;\n            this._sk.onopen = this._eventHandler?.onSocketConnected && this._eventHandler?.onSocketConnected;\n        }\n\n    }\n    send(data: enet.NetData): void {\n        if (this._sk && this._sk.readyState === WebSocket.OPEN) {\n            this._sk.send(data);\n        } else {\n            console.error(`socket is not ready ok`);\n        }\n    }\n\n    close(): void {\n        if (this._sk) {\n            const isConnected = this.isConnected;\n            this._sk.close();\n            this._sk.onclose = null;\n            this._sk.onerror = null;\n            this._sk.onmessage = null;\n            this._sk.onopen = null;\n            this._sk = null;\n            if (isConnected) {\n                this._eventHandler?.onSocketClosed && this._eventHandler?.onSocketClosed(null);\n            }\n\n        }\n    }\n\n}","import { WSocket } from \"./wsocket\";\n\nexport class NetNode<ProtoKeyType> implements enet.INode<ProtoKeyType>{\n    /**\n     * 套接字实现\n     */\n    protected _socket: enet.ISocket;\n    /**\n     * 网络事件处理器\n     */\n    protected _netEventHandler: enet.INetEventHandler;\n    /**\n     * 协议处理器\n     */\n    protected _protoHandler: enet.IProtoHandler;\n    /**\n     * 当前重连次数\n     */\n    protected _curReconnectCount: number = 0;\n    /**\n     * 重连配置\n     */\n    protected _reConnectCfg: enet.IReconnectConfig;\n    /**\n     * 是否初始化\n     */\n    protected _inited: boolean;\n    /**\n     * 连接参数对象\n     */\n    protected _connectOpt: enet.IConnectOptions;\n    /**\n     * 是否正在重连\n     */\n    protected _isReconnecting: boolean;\n    /**\n     * 计时器id\n     */\n    protected _reconnectTimerId: any;\n    /**\n     * 请求id \n     * 会自增\n     */\n    protected _reqId: number = 1;\n    /**\n     * 永久监听处理器字典\n     * key为请求key  = protoKey\n     * value为 回调处理器或回调函数\n     */\n    protected _pushHandlerMap: { [key: string]: enet.AnyCallback[] };\n    /**\n     * 一次监听推送处理器字典\n     * key为请求key  = protoKey\n     * value为 回调处理器或回调函数\n     */\n    protected _oncePushHandlerMap: { [key: string]: enet.AnyCallback[] };\n    /**\n     * 请求响应回调字典\n     * key为请求key  = protoKey_reqId\n     * value为 回调处理器或回调函数\n     */\n    protected _reqCfgMap: { [key: string]: enet.IRequestConfig };\n    /**socket事件处理器 */\n    protected _socketEventHandler: enet.ISocketEventHandler;\n    /**\n     * 获取socket事件处理器\n     */\n    protected get socketEventHandler(): enet.ISocketEventHandler {\n        if (!this._socketEventHandler) {\n            this._socketEventHandler = {\n                onSocketClosed: this._onSocketClosed.bind(this),\n                onSocketConnected: this._onSocketConnected.bind(this),\n                onSocketError: this._onSocketError.bind(this),\n                onSocketMsg: this._onSocketMsg.bind(this)\n            }\n        };\n\n\n        return this._socketEventHandler;\n    }\n    public init(config?: enet.INodeConfig): void {\n        if (this._inited) return;\n\n        this._protoHandler = config && config.protoHandler ? config.protoHandler : new DefaultProtoHandler();\n        this._socket = config && config.socket ? config.socket : new WSocket();\n        this._netEventHandler = config && config.netEventHandler ? config.netEventHandler : new DefaultNetEventHandler();\n        this._pushHandlerMap = {};\n        this._oncePushHandlerMap = {};\n        this._reqCfgMap = {};\n        const reConnectCfg = config.reConnectCfg;\n        if (!reConnectCfg) {\n            this._reConnectCfg = {\n                reconnectCount: 4,\n                connectTimeout: 60000,\n            };\n        } else {\n            this._reConnectCfg = config.reConnectCfg;\n            if (isNaN(reConnectCfg.reconnectCount)) {\n                this._reConnectCfg.reconnectCount = 4;\n            }\n            if (isNaN(reConnectCfg.connectTimeout)) {\n                this._reConnectCfg.connectTimeout = 60000;\n            }\n        }\n        this._inited = true;\n\n        this._socket.setEventHandler(this.socketEventHandler);\n    }\n\n    public connect(option: enet.IConnectOptions): void {\n        if (this._inited && this._socket) {\n            this._connectOpt = option;\n            this._socket.connect(option);\n            const netEventHandler = this._netEventHandler;\n            netEventHandler.onStartConnenct && netEventHandler.onStartConnenct(option);\n        } else {\n            console.error(`没有初始化`);\n        }\n    }\n    public disConnect(): void {\n        this._socket.close();\n    }\n\n\n    public reConnect(): void {\n        if (!this._inited || !this._socket) {\n            return;\n        }\n        if (this._curReconnectCount > this._reConnectCfg.reconnectCount) {\n            this._stopReconnect(false);\n            return;\n        }\n        this._isReconnecting = true;\n        this.connect(this._connectOpt);\n        if (!this._isReconnecting) {\n            const netEventHandler = this._netEventHandler;\n            netEventHandler.onStartReconnect && netEventHandler.onStartReconnect(this._reConnectCfg, this._connectOpt);\n        }\n        this._curReconnectCount++;\n        const netEventHandler = this._netEventHandler;\n        netEventHandler.onReconnecting && netEventHandler.onReconnecting(this._curReconnectCount, this._reConnectCfg, this._connectOpt);\n        this._reconnectTimerId = setTimeout(() => {\n            this.reConnect();\n        }, this._reConnectCfg.connectTimeout)\n\n    }\n    public request<ReqData = any, ResData = any>(\n        protoKey: ProtoKeyType,\n        data: ReqData,\n        resHandler: enet.ICallbackHandler<enet.IDecodePackage<ResData>> | enet.ValueCallback<enet.IDecodePackage<ResData>>,\n        arg?: any\n    ): void {\n        if (!this._isSocketReady()) return;\n        const reqId = this._reqId;\n        const encodePkg = this._protoHandler.encode(protoKey, { reqId: reqId, data: data });\n        if (encodePkg) {\n            const reqKey = `${encodePkg.key}_${reqId}`;\n            let reqCfg: enet.IRequestConfig = {\n                reqId: reqId,\n                protoKey: encodePkg.key,\n                data: data,\n                resHandler: resHandler,\n\n            };\n            if (arg) reqCfg = Object.assign(reqCfg, arg);\n            this._reqCfgMap[reqKey] = reqCfg;\n            this._reqId++;\n            this._netEventHandler.onStartRequest && this._netEventHandler.onStartRequest(reqCfg, this._connectOpt);\n            this.send(encodePkg.data);\n        }\n\n    }\n    public notify(protoKey: ProtoKeyType, data?: any): void {\n        if (!this._isSocketReady()) return;\n        const encodePkg = this._protoHandler.encode(protoKey, { data: data });\n        this.send(encodePkg.data);\n    }\n    public send(netData: enet.NetData): void {\n        this._socket.send(netData);\n    }\n    public onPush<ResData = any>(protoKey: ProtoKeyType, handler: enet.ICallbackHandler<enet.IDecodePackage<ResData>> | enet.ValueCallback<enet.IDecodePackage<ResData>>): void {\n        const key = this._protoHandler.protoKey2Key(protoKey);\n        if (!this._pushHandlerMap[key]) {\n            this._pushHandlerMap[key] = [handler];\n        } else {\n            this._pushHandlerMap[key].push(handler);\n        }\n\n    }\n    public oncePush<ResData = any>(protoKey: ProtoKeyType, handler: enet.ICallbackHandler<enet.IDecodePackage<ResData>> | enet.ValueCallback<enet.IDecodePackage<ResData>>): void {\n        const key = this._protoHandler.protoKey2Key(protoKey);\n        if (!this._oncePushHandlerMap[key]) {\n            this._oncePushHandlerMap[key] = [handler];\n        } else {\n            this._oncePushHandlerMap[key].push(handler);\n        }\n    }\n    public offPush(protoKey: ProtoKeyType, callbackHandler: enet.AnyCallback, context?: any, onceOnly?: boolean): void {\n        const key = this._protoHandler.protoKey2Key(protoKey);\n        let handlers: enet.AnyCallback[];\n        if (onceOnly) {\n            handlers = this._oncePushHandlerMap[key];\n        } else {\n            handlers = this._pushHandlerMap[key];\n        }\n        if (handlers) {\n            let handler: enet.AnyCallback;\n            let isEqual: boolean;\n            for (let i = handlers.length - 1; i > -1; i--) {\n                handler = handlers[i];\n                isEqual = false;\n                if (typeof handler === \"function\" && handler === callbackHandler) {\n                    isEqual = true;\n                } else if (typeof handler === \"object\"\n                    && handler.method === callbackHandler && (!context || context === handler.context)) {\n                    isEqual = true;\n                }\n                if (isEqual) {\n                    if (i !== handlers.length) {\n                        handlers[i] = handlers[handlers.length - 1];\n                        handlers[handlers.length - 1] = handler;\n                    }\n                    handlers.pop();\n                }\n            }\n        }\n    }\n    public offPushAll(protoKey?: ProtoKeyType): void {\n        if (protoKey) {\n            const key = this._protoHandler.protoKey2Key(protoKey);\n            delete this._pushHandlerMap[key];\n            delete this._oncePushHandlerMap[key];\n        } else {\n            this._pushHandlerMap = {};\n            this._oncePushHandlerMap = {};\n        }\n\n    }\n    /**\n     * 初始化好，socket开启\n     */\n    protected _isSocketReady(): boolean {\n        if (this._inited && this._socket && this._socket.isConnected) {\n            return true;\n        } else {\n            console.error(`${this._inited ? (this._socket ? \"socket is connected\" : \"socket is null\") : \"netNode is unInited\"}`);\n            return false;\n        }\n    }\n    /**\n     * 当socket连接成功\n     * @param event \n     */\n    protected _onSocketConnected(event: any): void {\n        if (this._isReconnecting) {\n            this._stopReconnect();\n        } else {\n            const handler = this._netEventHandler;\n            const connectOpt = this._connectOpt;\n            connectOpt.connectEnd && connectOpt.connectEnd();\n            handler.onConnectEnd && handler.onConnectEnd(connectOpt);\n        }\n    }\n    /**\n     * 当socket报错\n     * @param event \n     */\n    protected _onSocketError(event: any): void {\n        const eventHandler = this._netEventHandler;\n        eventHandler.onError && eventHandler.onError(event, this._connectOpt);\n    }\n    /**\n     * 当socket有消息\n     * @param event \n     */\n    protected _onSocketMsg(event: { data: enet.NetData }) {\n        const depackage = this._protoHandler.decode(event.data);\n        const netEventHandler = this._netEventHandler;\n        netEventHandler.onServerMsg && netEventHandler.onServerMsg(depackage, this._connectOpt)\n        if (depackage.errorMsg) {\n            netEventHandler.onCustomError && netEventHandler.onCustomError(depackage, this._connectOpt);\n        } else {\n            let reqCfg: enet.IRequestConfig;\n            if (depackage.reqId > 0) {\n                //请求\n                const reqKey = `${depackage.key}_${depackage.reqId}`;\n                reqCfg = this._reqCfgMap[reqKey];\n                if (!reqCfg) return;\n                reqCfg.decodePkg = depackage;\n                this._runHandler(reqCfg.resHandler, depackage);\n                const netEventHandler = this._netEventHandler;\n            } else {\n                const pushKey = depackage.key;\n                //推送\n                let handlers = this._pushHandlerMap[pushKey];\n                const onceHandlers = this._oncePushHandlerMap[pushKey];\n                if (!handlers) {\n                    handlers = onceHandlers;\n                } else if (onceHandlers) {\n                    handlers = handlers.concat(onceHandlers);\n                }\n                delete this._oncePushHandlerMap[pushKey];\n                if (handlers) {\n                    for (let i = 0; i < handlers.length; i++) {\n                        this._runHandler(handlers[i], depackage);\n                    }\n                }\n\n            }\n\n\n\n        }\n\n    }\n    /**\n     * 当socket关闭\n     * @param event \n     */\n    protected _onSocketClosed(event: any): void {\n        const netEventHandler = this._netEventHandler;\n        this._socket.close();\n        if (this._isReconnecting) {\n            clearTimeout(this._reconnectTimerId);\n            this.reConnect()\n        } else {\n            netEventHandler.onClosed && netEventHandler.onClosed(event, this._connectOpt);\n        }\n\n    }\n\n    /**\n     * 执行回调，会并接上透传数据\n     * @param handler 回调\n     * @param depackage 解析完成的数据包\n     */\n    protected _runHandler(handler: enet.AnyCallback, depackage: enet.IDecodePackage) {\n        if (typeof handler === \"function\") {\n            handler(depackage);\n        } else if (typeof handler === \"object\") {\n            handler.method && handler.method.apply(handler.context, handler.args ? [depackage].concat(handler.args) : [depackage]);\n        }\n    }\n    /**\n     * 停止重连\n     * @param isOk 重连是否成功\n     */\n    protected _stopReconnect(isOk = true) {\n        if (this._isReconnecting) {\n            this._isReconnecting = false;\n            clearTimeout(this._reconnectTimerId);\n            this._curReconnectCount = 0;\n            const eventHandler = this._netEventHandler;\n            eventHandler.onReconnectEnd && eventHandler.onReconnectEnd(isOk, this._reConnectCfg, this._connectOpt);\n        }\n    }\n\n}\nclass DefaultProtoHandler<ProtoKeyType> implements enet.IProtoHandler<ProtoKeyType> {\n    protoKey2Key(protoKey: ProtoKeyType): string {\n        return protoKey as any;\n    }\n    encode(protoKey: ProtoKeyType, msg: enet.IMessage): enet.IEncodePackage {\n        const key = this.protoKey2Key(protoKey);\n        return {\n            key: protoKey as any,\n            data: JSON.stringify({ key: key, msg: msg }),\n        }\n    }\n    decode(data: enet.NetData): enet.IDecodePackage<any> {\n        const parsedData: { key: string, msg: enet.IMessage } = JSON.parse(data as string);\n\n        return { key: parsedData.key, data: parsedData.msg.data, reqId: parsedData.msg.reqId };\n    }\n\n}\nclass DefaultNetEventHandler implements enet.INetEventHandler {\n    private _net: enet.INode<any>;\n    onStartConnenct?(connectOpt: enet.IConnectOptions): void {\n        console.log(`开始连接:${connectOpt.url}`)\n    }\n    onConnectEnd?(connectOpt: enet.IConnectOptions): void {\n        console.log(`连接成功:${connectOpt.url}`);\n    }\n    onError(event: any, connectOpt: enet.IConnectOptions): void {\n        console.error(`socket错误`);\n        console.error(event);\n    }\n    onClosed(event: any, connectOpt: enet.IConnectOptions): void {\n        console.error(`socket错误`);\n        console.error(event);\n    }\n    onStartReconnect?(reConnectCfg: enet.IReconnectConfig, connectOpt: enet.IConnectOptions): void {\n        console.log(`开始重连:${connectOpt.url}`);\n    }\n    onReconnecting?(curCount: number, reConnectCfg: enet.IReconnectConfig, connectOpt: enet.IConnectOptions): void {\n        console.log(`url:${connectOpt.url}重连${curCount}次,剩余次数:${reConnectCfg.reconnectCount}`);\n    }\n    onReconnectEnd?(isOk: boolean, reConnectCfg: enet.IReconnectConfig, connectOpt: enet.IConnectOptions): void {\n        console.log(`url:${connectOpt.url}重连 ${isOk ? \"成功\" : \"失败\"} `);\n    }\n    onStartRequest?(reqCfg: enet.IRequestConfig, connectOpt: enet.IConnectOptions): void {\n        console.log(`开始请求:${reqCfg.protoKey},id:${reqCfg.reqId}`)\n    }\n    onServerMsg?(dpkg: enet.IDecodePackage<any>, connectOpt: enet.IConnectOptions): void {\n        console.log(`请求返回:${dpkg.key}`);\n    }\n    onRequestTimeout?(reqCfg: enet.IRequestConfig, connectOpt: enet.IConnectOptions): void {\n        console.warn(`请求超时:${reqCfg.protoKey}`)\n    }\n    onCustomError?(dpkg: enet.IDecodePackage<any>, connectOpt: enet.IConnectOptions): void {\n        console.error(`协议:${dpkg.key},请求id:${dpkg.reqId},错误码:${dpkg.code},错误信息:${dpkg.errorMsg}`)\n    }\n\n\n\n}"],"names":["SocketState"],"mappings":"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"}