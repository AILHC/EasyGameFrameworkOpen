{"version":3,"file":"index.js","sources":["../../../src/default-net-event-handler.ts","../../../src/pkg-type.ts","../../../src/socketStateType.ts","../../../src/wsocket.ts","../../../src/net-node.ts"],"sourcesContent":["export class DefaultNetEventHandler implements enet.INetEventHandler {\n    onStartConnenct?(connectOpt: enet.IConnectOptions): void {\n        console.log(`start connect:${connectOpt.url},opt:`, connectOpt);\n    }\n    onConnectEnd?(connectOpt: enet.IConnectOptions, handshakeRes?: any): void {\n        console.log(`connect ok:${connectOpt.url},opt:`, connectOpt);\n        console.log(`handshakeRes:`, handshakeRes);\n    }\n    onError(event: any, connectOpt: enet.IConnectOptions): void {\n        console.error(`socket error,opt:`, connectOpt);\n        console.error(event);\n    }\n    onClosed(event: any, connectOpt: enet.IConnectOptions): void {\n        console.error(`socket close,opt:`, connectOpt);\n        console.error(event);\n    }\n    onStartReconnect?(reConnectCfg: enet.IReconnectConfig, connectOpt: enet.IConnectOptions): void {\n        console.log(`start reconnect:${connectOpt.url},opt:`, connectOpt);\n    }\n    onReconnecting?(curCount: number, reConnectCfg: enet.IReconnectConfig, connectOpt: enet.IConnectOptions): void {\n        console.log(\n            `url:${connectOpt.url} reconnect count:${curCount},less count:${reConnectCfg.reconnectCount},opt:`,\n            connectOpt\n        );\n    }\n    onReconnectEnd?(isOk: boolean, reConnectCfg: enet.IReconnectConfig, connectOpt: enet.IConnectOptions): void {\n        console.log(`url:${connectOpt.url}reconnect end ${isOk ? \"ok\" : \"fail\"} ,opt:`, connectOpt);\n    }\n    onStartRequest?(reqCfg: enet.IRequestConfig, connectOpt: enet.IConnectOptions): void {\n        console.log(`start request:${reqCfg.protoKey},id:${reqCfg.reqId},opt:`, connectOpt);\n        console.log(`reqCfg:`, reqCfg);\n    }\n    onData?(dpkg: enet.IDecodePackage<any>, connectOpt: enet.IConnectOptions): void {\n        console.log(`data :${dpkg.key},opt:`, connectOpt);\n    }\n    onRequestTimeout?(reqCfg: enet.IRequestConfig, connectOpt: enet.IConnectOptions): void {\n        console.warn(`request timeout:${reqCfg.protoKey},opt:`, connectOpt);\n    }\n    onCustomError?(dpkg: enet.IDecodePackage<any>, connectOpt: enet.IConnectOptions): void {\n        console.error(\n            `proto key:${dpkg.key},reqId:${dpkg.reqId},code:${dpkg.code},errorMsg:${dpkg.errorMsg},opt:`,\n            connectOpt\n        );\n    }\n    onKick(dpkg: enet.IDecodePackage<any>, copt: enet.IConnectOptions) {\n        console.log(`be kick,opt:`, copt);\n    }\n}\n","export enum PackageType {\n    /**握手 */\n    HANDSHAKE = 1,\n    /**握手回应 */\n    HANDSHAKE_ACK = 2,\n    /**心跳 */\n    HEARTBEAT = 3,\n    /**数据 */\n    DATA = 4,\n    /**踢下线 */\n    KICK = 5\n}","export enum SocketState {\n    /**连接中 */\n    CONNECTING,\n    /**打开 */\n    OPEN,\n    /**关闭中 */\n    CLOSING,\n    /**关闭了 */\n    CLOSED\n}","import { SocketState } from \"./socketStateType\";\n\nexport class WSocket implements enet.ISocket {\n    private _sk: WebSocket;\n    private _eventHandler: enet.ISocketEventHandler;\n    public get state(): SocketState {\n        return this._sk ? this._sk.readyState : SocketState.CLOSED;\n    }\n    public get isConnected(): boolean {\n        return this._sk ? this._sk.readyState === SocketState.OPEN : false;\n    }\n    setEventHandler(handler: enet.ISocketEventHandler): void {\n        this._eventHandler = handler;\n    }\n    connect(opt: enet.IConnectOptions): boolean {\n        let url = opt.url;\n        if (!url) {\n            if (opt.host && opt.port) {\n                url = `${opt.protocol ? \"wss\" : \"ws\"}://${opt.host}:${opt.port}`;\n            } else {\n                return false;\n            }\n        }\n        opt.url = url;\n        if (this._sk) {\n            this.close(true);\n        }\n        if (!this._sk) {\n            this._sk = new WebSocket(url);\n            if (!opt.binaryType) {\n                opt.binaryType = \"arraybuffer\";\n            }\n            this._sk.binaryType = opt.binaryType;\n            this._sk.onclose = this._eventHandler?.onSocketClosed && this._eventHandler?.onSocketClosed;\n            this._sk.onerror = this._eventHandler?.onSocketError && this._eventHandler?.onSocketError;\n            this._sk.onmessage = this._eventHandler?.onSocketMsg && this._eventHandler?.onSocketMsg;\n            this._sk.onopen = this._eventHandler?.onSocketConnected && this._eventHandler?.onSocketConnected;\n        }\n    }\n    send(data: enet.NetData): void {\n        if (this._sk) {\n            this._sk.send(data);\n        } else {\n            console.error(`socket is null`);\n        }\n    }\n\n    close(disconnect?: boolean): void {\n        if (this._sk) {\n            const isConnected = this.isConnected;\n            this._sk.close();\n            this._sk.onclose = null;\n            this._sk.onerror = null;\n            this._sk.onmessage = null;\n            this._sk.onopen = null;\n            this._sk = null;\n            if (isConnected) {\n                this._eventHandler?.onSocketClosed && this._eventHandler?.onSocketClosed(disconnect);\n            }\n        }\n    }\n}\n","import { DefaultNetEventHandler } from \"./default-net-event-handler\";\nimport { PackageType } from \"./pkg-type\";\nimport { SocketState } from \"./socketStateType\";\nimport { WSocket } from \"./wsocket\";\n\nexport class NetNode<ProtoKeyType> implements enet.INode<ProtoKeyType> {\n    /**\n     * 套接字实现\n     */\n    protected _socket: enet.ISocket;\n    public get socket(): enet.ISocket {\n        return this._socket;\n    }\n    /**\n     * 网络事件处理器\n     */\n    protected _netEventHandler: enet.INetEventHandler;\n    public get netEventHandler(): enet.INetEventHandler<any> {\n        return this._netEventHandler;\n    }\n    /**\n     * 协议处理器\n     */\n    protected _protoHandler: enet.IProtoHandler;\n    public get protoHandler(): enet.IProtoHandler<any> {\n        return this._protoHandler;\n    }\n    /**\n     * 当前重连次数\n     */\n    protected _curReconnectCount: number = 0;\n    /**\n     * 重连配置\n     */\n    protected _reConnectCfg: enet.IReconnectConfig;\n    /**\n     * 是否初始化\n     */\n    protected _inited: boolean;\n    /**\n     * 连接参数对象\n     */\n    protected _connectOpt: enet.IConnectOptions;\n    /**\n     * 是否正在重连\n     */\n    protected _isReconnecting: boolean;\n    /**\n     * 计时器id\n     */\n    protected _reconnectTimerId: any;\n    /**\n     * 请求id\n     * 会自增\n     */\n    protected _reqId: number = 1;\n    /**\n     * 永久监听处理器字典\n     * key为请求key  = protoKey\n     * value为 回调处理器或回调函数\n     */\n    protected _pushHandlerMap: { [key: string]: enet.AnyCallback[] };\n    /**\n     * 一次监听推送处理器字典\n     * key为请求key  = protoKey\n     * value为 回调处理器或回调函数\n     */\n    protected _oncePushHandlerMap: { [key: string]: enet.AnyCallback[] };\n    /**\n     * 请求响应回调字典\n     * key为请求key  = protoKey_reqId\n     * value为 回调处理器或回调函数\n     */\n    protected _reqCfgMap: { [key: number]: enet.IRequestConfig };\n    /**socket事件处理器 */\n    protected _socketEventHandler: enet.ISocketEventHandler;\n\n    /**\n     * 获取socket事件处理器\n     */\n    protected get socketEventHandler(): enet.ISocketEventHandler {\n        if (!this._socketEventHandler) {\n            this._socketEventHandler = {\n                onSocketClosed: this._onSocketClosed.bind(this),\n                onSocketConnected: this._onSocketConnected.bind(this),\n                onSocketError: this._onSocketError.bind(this),\n                onSocketMsg: this._onSocketMsg.bind(this)\n            };\n        }\n\n        return this._socketEventHandler;\n    }\n    /**数据包类型处理 */\n    protected _pkgTypeHandlers: { [key: number]: (dpkg: enet.IDecodePackage) => void };\n    /**心跳配置 */\n    protected _heartbeatConfig: enet.IHeartBeatConfig;\n    /**心跳间隔阈值 默认100毫秒 */\n    protected _gapThreashold: number;\n    /**使用加密 */\n    protected _useCrypto: boolean;\n\n    public init(config?: enet.INodeConfig): void {\n        if (this._inited) return;\n\n        this._protoHandler = config && config.protoHandler ? config.protoHandler : new DefaultProtoHandler();\n        this._socket = config && config.socket ? config.socket : new WSocket();\n        this._netEventHandler =\n            config && config.netEventHandler ? config.netEventHandler : new DefaultNetEventHandler();\n        this._pushHandlerMap = {};\n        this._oncePushHandlerMap = {};\n        this._reqCfgMap = {};\n        const reConnectCfg = config && config.reConnectCfg;\n        if (!reConnectCfg) {\n            this._reConnectCfg = {\n                reconnectCount: 4,\n                connectTimeout: 60000\n            };\n        } else {\n            this._reConnectCfg = reConnectCfg;\n            if (isNaN(reConnectCfg.reconnectCount)) {\n                this._reConnectCfg.reconnectCount = 4;\n            }\n            if (isNaN(reConnectCfg.connectTimeout)) {\n                this._reConnectCfg.connectTimeout = 60000;\n            }\n        }\n        this._gapThreashold = config && !isNaN(config.heartbeatGapThreashold) ? config.heartbeatGapThreashold : 100;\n        this._useCrypto = config && config.useCrypto;\n        this._inited = true;\n\n        this._socket.setEventHandler(this.socketEventHandler);\n\n        this._pkgTypeHandlers = {};\n        this._pkgTypeHandlers[PackageType.HANDSHAKE] = this._onHandshake.bind(this);\n        this._pkgTypeHandlers[PackageType.HEARTBEAT] = this._heartbeat.bind(this);\n        this._pkgTypeHandlers[PackageType.DATA] = this._onData.bind(this);\n        this._pkgTypeHandlers[PackageType.KICK] = this._onKick.bind(this);\n    }\n\n    public connect(option: string | enet.IConnectOptions, connectEnd?: VoidFunction): void {\n        const socket = this._socket;\n        const socketInCloseState =\n            socket && (socket.state === SocketState.CLOSING || socket.state === SocketState.CLOSED);\n        if (this._inited && socketInCloseState) {\n            if (typeof option === \"string\") {\n                option = {\n                    url: option,\n                    connectEnd: connectEnd\n                };\n            }\n            if (connectEnd) {\n                option.connectEnd = connectEnd;\n            }\n            this._connectOpt = option;\n\n            this._socket.connect(option);\n            const netEventHandler = this._netEventHandler;\n            netEventHandler.onStartConnenct && netEventHandler.onStartConnenct(option);\n        } else {\n            console.error(`is not inited${socket ? \" , socket state\" + socket.state : \"\"}`);\n        }\n    }\n    public disConnect(): void {\n        this._socket.close(true);\n\n        //清理心跳定时器\n        if (this._heartbeatTimeId) {\n            clearTimeout(this._heartbeatTimeId);\n            this._heartbeatTimeId = undefined;\n        }\n        if (this._heartbeatTimeoutId) {\n            clearTimeout(this._heartbeatTimeoutId);\n            this._heartbeatTimeoutId = undefined;\n        }\n    }\n\n    public reConnect(): void {\n        if (!this._inited || !this._socket) {\n            return;\n        }\n        if (this._curReconnectCount > this._reConnectCfg.reconnectCount) {\n            this._stopReconnect(false);\n            return;\n        }\n        if (!this._isReconnecting) {\n            const netEventHandler = this._netEventHandler;\n            netEventHandler.onStartReconnect && netEventHandler.onStartReconnect(this._reConnectCfg, this._connectOpt);\n        }\n        this._isReconnecting = true;\n        this.connect(this._connectOpt);\n\n        this._curReconnectCount++;\n        const netEventHandler = this._netEventHandler;\n        netEventHandler.onReconnecting &&\n            netEventHandler.onReconnecting(this._curReconnectCount, this._reConnectCfg, this._connectOpt);\n        this._reconnectTimerId = setTimeout(() => {\n            this.reConnect();\n        }, this._reConnectCfg.connectTimeout);\n    }\n    public request<ReqData = any, ResData = any>(\n        protoKey: ProtoKeyType,\n        data: ReqData,\n        resHandler:\n            | enet.ICallbackHandler<enet.IDecodePackage<ResData>>\n            | enet.ValueCallback<enet.IDecodePackage<ResData>>,\n        arg?: any\n    ): void {\n        if (!this._isSocketReady()) return;\n        const reqId = this._reqId;\n        const protoHandler = this._protoHandler;\n        const encodePkg = protoHandler.encodeMsg({ key: protoKey, reqId: reqId, data: data }, this._useCrypto);\n        if (encodePkg) {\n            let reqCfg: enet.IRequestConfig = {\n                reqId: reqId,\n                protoKey: protoHandler.protoKey2Key(protoKey),\n                data: data,\n                resHandler: resHandler\n            };\n            if (arg) reqCfg = Object.assign(reqCfg, arg);\n            this._reqCfgMap[reqId] = reqCfg;\n            this._reqId++;\n            this._netEventHandler.onStartRequest && this._netEventHandler.onStartRequest(reqCfg, this._connectOpt);\n            this.send(encodePkg);\n        }\n    }\n    public notify<T>(protoKey: ProtoKeyType, data?: T): void {\n        if (!this._isSocketReady()) return;\n\n        const encodePkg = this._protoHandler.encodeMsg(\n            {\n                key: protoKey,\n                data: data\n            } as enet.IMessage,\n            this._useCrypto\n        );\n\n        this.send(encodePkg);\n    }\n    public send(netData: enet.NetData): void {\n        this._socket.send(netData);\n    }\n    public onPush<ResData = any>(\n        protoKey: ProtoKeyType,\n        handler: enet.ICallbackHandler<enet.IDecodePackage<ResData>> | enet.ValueCallback<enet.IDecodePackage<ResData>>\n    ): void {\n        const key = this._protoHandler.protoKey2Key(protoKey);\n        if (!this._pushHandlerMap[key]) {\n            this._pushHandlerMap[key] = [handler];\n        } else {\n            this._pushHandlerMap[key].push(handler);\n        }\n    }\n    public oncePush<ResData = any>(\n        protoKey: ProtoKeyType,\n        handler: enet.ICallbackHandler<enet.IDecodePackage<ResData>> | enet.ValueCallback<enet.IDecodePackage<ResData>>\n    ): void {\n        const key = this._protoHandler.protoKey2Key(protoKey);\n        if (!this._oncePushHandlerMap[key]) {\n            this._oncePushHandlerMap[key] = [handler];\n        } else {\n            this._oncePushHandlerMap[key].push(handler);\n        }\n    }\n    public offPush(protoKey: ProtoKeyType, callbackHandler: enet.AnyCallback, context?: any, onceOnly?: boolean): void {\n        const key = this._protoHandler.protoKey2Key(protoKey);\n        let handlers: enet.AnyCallback[];\n        if (onceOnly) {\n            handlers = this._oncePushHandlerMap[key];\n        } else {\n            handlers = this._pushHandlerMap[key];\n        }\n        if (handlers) {\n            let handler: enet.AnyCallback;\n            let isEqual: boolean;\n            for (let i = handlers.length - 1; i > -1; i--) {\n                handler = handlers[i];\n                isEqual = false;\n                if (typeof handler === \"function\" && handler === callbackHandler) {\n                    isEqual = true;\n                } else if (\n                    typeof handler === \"object\" &&\n                    handler.method === callbackHandler &&\n                    (!context || context === handler.context)\n                ) {\n                    isEqual = true;\n                }\n                if (isEqual) {\n                    if (i !== handlers.length) {\n                        handlers[i] = handlers[handlers.length - 1];\n                        handlers[handlers.length - 1] = handler;\n                    }\n                    handlers.pop();\n                }\n            }\n        }\n    }\n    public offPushAll(protoKey?: ProtoKeyType): void {\n        if (protoKey) {\n            const key = this._protoHandler.protoKey2Key(protoKey);\n            delete this._pushHandlerMap[key];\n            delete this._oncePushHandlerMap[key];\n        } else {\n            this._pushHandlerMap = {};\n            this._oncePushHandlerMap = {};\n        }\n    }\n    /**\n     * 握手包处理\n     * @param dpkg\n     */\n    protected _onHandshake(dpkg: enet.IDecodePackage) {\n        if (dpkg.errorMsg) {\n            return;\n        }\n        this._handshakeInit(dpkg);\n        const ackPkg = this._protoHandler.encodePkg({ type: PackageType.HANDSHAKE_ACK });\n        this.send(ackPkg);\n        const connectOpt = this._connectOpt;\n        const handshakeRes = this._protoHandler.handShakeRes;\n        connectOpt.connectEnd && connectOpt.connectEnd(handshakeRes);\n        this._netEventHandler.onConnectEnd && this._netEventHandler.onConnectEnd(connectOpt, handshakeRes);\n    }\n    /**\n     * 握手初始化\n     * @param dpkg\n     */\n    protected _handshakeInit(dpkg: enet.IDecodePackage) {\n        const heartbeatCfg = this.protoHandler.heartbeatConfig;\n\n        this._heartbeatConfig = heartbeatCfg;\n    }\n    /**心跳超时定时器id */\n    protected _heartbeatTimeoutId: number;\n    /**心跳定时器id */\n    protected _heartbeatTimeId: number;\n    /**最新心跳超时时间 */\n    protected _nextHeartbeatTimeoutTime: number;\n    /**\n     * 心跳包处理\n     * @param dpkg\n     */\n    protected _heartbeat(dpkg: enet.IDecodePackage) {\n        const heartbeatCfg = this._heartbeatConfig;\n        const protoHandler = this._protoHandler;\n        if (!heartbeatCfg || !heartbeatCfg.heartbeatInterval) {\n            return;\n        }\n        if (this._heartbeatTimeoutId) {\n            return;\n        }\n        this._heartbeatTimeId = setTimeout(() => {\n            this._heartbeatTimeId = undefined;\n            const heartbeatPkg = protoHandler.encodePkg({ type: PackageType.HEARTBEAT }, this._useCrypto);\n            this.send(heartbeatPkg);\n            this._nextHeartbeatTimeoutTime = Date.now() + heartbeatCfg.heartbeatTimeout;\n\n            this._heartbeatTimeoutId = setTimeout(\n                this._heartbeatTimeoutCb.bind(this),\n                heartbeatCfg.heartbeatTimeout\n            ) as any;\n        }, heartbeatCfg.heartbeatInterval) as any;\n    }\n    /**\n     * 心跳超时处理\n     */\n    protected _heartbeatTimeoutCb() {\n        var gap = this._nextHeartbeatTimeoutTime - Date.now();\n        if (gap > this._reConnectCfg) {\n            this._heartbeatTimeoutId = setTimeout(this._heartbeatTimeoutCb.bind(this), gap) as any;\n        } else {\n            console.error(\"server heartbeat timeout\");\n            this.disConnect();\n        }\n    }\n    /**\n     * 数据包处理\n     * @param dpkg\n     */\n    protected _onData(dpkg: enet.IDecodePackage) {\n        if (dpkg.errorMsg) {\n            return;\n        }\n        let reqCfg: enet.IRequestConfig;\n        if (!isNaN(dpkg.reqId) && dpkg.reqId > 0) {\n            //请求\n            const reqId = dpkg.reqId;\n            reqCfg = this._reqCfgMap[reqId];\n            if (!reqCfg) return;\n            reqCfg.decodePkg = dpkg;\n            this._runHandler(reqCfg.resHandler, dpkg);\n        } else {\n            const pushKey = dpkg.key;\n            //推送\n            let handlers = this._pushHandlerMap[pushKey];\n            const onceHandlers = this._oncePushHandlerMap[pushKey];\n            if (!handlers) {\n                handlers = onceHandlers;\n            } else if (onceHandlers) {\n                handlers = handlers.concat(onceHandlers);\n            }\n            delete this._oncePushHandlerMap[pushKey];\n            if (handlers) {\n                for (let i = 0; i < handlers.length; i++) {\n                    this._runHandler(handlers[i], dpkg);\n                }\n            }\n        }\n        const netEventHandler = this._netEventHandler;\n        netEventHandler.onData && netEventHandler.onData(dpkg, this._connectOpt, reqCfg);\n    }\n    /**\n     * 踢下线数据包处理\n     * @param dpkg\n     */\n    protected _onKick(dpkg: enet.IDecodePackage) {\n        this._netEventHandler.onKick && this._netEventHandler.onKick(dpkg, this._connectOpt);\n    }\n    /**\n     * socket状态是否准备好\n     */\n    protected _isSocketReady(): boolean {\n        const socket = this._socket;\n        const socketIsReady = socket && (socket.state === SocketState.CONNECTING || socket.state === SocketState.OPEN);\n        if (this._inited && socketIsReady) {\n            return true;\n        } else {\n            console.error(\n                `${\n                    this._inited\n                        ? socketIsReady\n                            ? \"socket is ready\"\n                            : \"socket is null or unready\"\n                        : \"netNode is unInited\"\n                }`\n            );\n            return false;\n        }\n    }\n    /**\n     * 当socket连接成功\n     * @param event\n     */\n    protected _onSocketConnected(event: any): void {\n        if (this._isReconnecting) {\n            this._stopReconnect();\n        } else {\n            const handler = this._netEventHandler;\n            const connectOpt = this._connectOpt;\n            const protoHandler = this._protoHandler;\n            if (protoHandler && connectOpt.handShakeReq) {\n                const handShakeNetData = protoHandler.encodePkg({\n                    type: PackageType.HANDSHAKE,\n                    data: connectOpt.handShakeReq\n                });\n                this.send(handShakeNetData);\n            } else {\n                connectOpt.connectEnd && connectOpt.connectEnd();\n                handler.onConnectEnd && handler.onConnectEnd(connectOpt);\n            }\n        }\n    }\n    /**\n     * 当socket报错\n     * @param event\n     */\n    protected _onSocketError(event: any): void {\n        const eventHandler = this._netEventHandler;\n        eventHandler.onError && eventHandler.onError(event, this._connectOpt);\n    }\n    /**\n     * 当socket有消息\n     * @param event\n     */\n    protected _onSocketMsg(event: { data: enet.NetData }) {\n        const depackage = this._protoHandler.decodePkg(event.data);\n        const netEventHandler = this._netEventHandler;\n        const pkgTypeHandler = this._pkgTypeHandlers[depackage.type];\n        if (pkgTypeHandler) {\n            pkgTypeHandler(depackage);\n        } else {\n            console.error(`There is no handler of this type:${depackage.type}`);\n        }\n        if (depackage.errorMsg) {\n            netEventHandler.onCustomError && netEventHandler.onCustomError(depackage, this._connectOpt);\n        }\n        //更新心跳超时时间\n        if (this._nextHeartbeatTimeoutTime) {\n            this._nextHeartbeatTimeoutTime = Date.now() + this._heartbeatConfig.heartbeatTimeout;\n        }\n    }\n    /**\n     * 当socket关闭\n     * @param event\n     */\n    protected _onSocketClosed(event: any): void {\n        const netEventHandler = this._netEventHandler;\n        if (this._isReconnecting) {\n            clearTimeout(this._reconnectTimerId);\n            this.reConnect();\n        } else {\n            netEventHandler.onClosed && netEventHandler.onClosed(event, this._connectOpt);\n        }\n    }\n\n    /**\n     * 执行回调，会并接上透传数据\n     * @param handler 回调\n     * @param depackage 解析完成的数据包\n     */\n    protected _runHandler(handler: enet.AnyCallback, depackage: enet.IDecodePackage) {\n        if (typeof handler === \"function\") {\n            handler(depackage);\n        } else if (typeof handler === \"object\") {\n            handler.method &&\n                handler.method.apply(handler.context, handler.args ? [depackage].concat(handler.args) : [depackage]);\n        }\n    }\n    /**\n     * 停止重连\n     * @param isOk 重连是否成功\n     */\n    protected _stopReconnect(isOk = true) {\n        if (this._isReconnecting) {\n            this._isReconnecting = false;\n            clearTimeout(this._reconnectTimerId);\n            this._curReconnectCount = 0;\n            const eventHandler = this._netEventHandler;\n            eventHandler.onReconnectEnd && eventHandler.onReconnectEnd(isOk, this._reConnectCfg, this._connectOpt);\n        }\n    }\n}\nclass DefaultProtoHandler<ProtoKeyType> implements enet.IProtoHandler<ProtoKeyType> {\n    private _heartbeatCfg: enet.IHeartBeatConfig;\n    public get handShakeRes(): any {\n        return undefined;\n    }\n    public get heartbeatConfig(): enet.IHeartBeatConfig {\n        return this._heartbeatCfg;\n    }\n    encodePkg(pkg: enet.IPackage<any>, useCrypto?: boolean): enet.NetData {\n        return JSON.stringify(pkg);\n    }\n    protoKey2Key(protoKey: ProtoKeyType): string {\n        return protoKey as any;\n    }\n    encodeMsg<T>(msg: enet.IMessage<T, ProtoKeyType>, useCrypto?: boolean): enet.NetData {\n        return JSON.stringify({ type: PackageType.DATA, data: msg } as enet.IPackage);\n    }\n    decodePkg(data: enet.NetData): enet.IDecodePackage<any> {\n        const parsedData: enet.IDecodePackage = JSON.parse(data as string);\n        const pkgType = parsedData.type;\n\n        if (parsedData.type === PackageType.DATA) {\n            const msg: enet.IMessage = parsedData.data;\n            return {\n                key: msg && msg.key,\n                type: pkgType,\n                data: msg.data,\n                reqId: parsedData.data && parsedData.data.reqId\n            } as enet.IDecodePackage;\n        } else {\n            if (pkgType === PackageType.HANDSHAKE) {\n                this._heartbeatCfg = parsedData.data;\n            }\n            return {\n                type: pkgType,\n                data: parsedData.data\n            } as enet.IDecodePackage;\n        }\n    }\n}\n"],"names":[],"mappings":"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"}