{"version":3,"file":"index.mjs","sources":["../../../src/broadcast.ts"],"sourcesContent":["\n/**\n * @author AILHC 505126057@qq.com\n */\nexport class Broadcast<MsgKeyType extends broadcast.IMsgKey, ValueType = any, ResultType = any>\n    implements broadcast.IBroadcast<MsgKeyType, ValueType, ResultType>{\n\n    public keys: { [key in keyof MsgKeyType]: MsgKeyType[key] };\n    private _valueMap: { [key in keyof MsgKeyType]: any };\n    private _handlerMap: { [key in keyof MsgKeyType]: broadcast.IListenerHandler | broadcast.IListenerHandler[] };\n    private _stickHandlersMap: { [key in keyof MsgKeyType]: broadcast.IStickyHandler[] };\n    protected _unuseHandlers: any[]\n    constructor() {\n        this.keys = new Proxy({} as any, {\n            get: (target, p) => {\n                return p;\n            }\n        })\n        this._valueMap = {} as any;\n        this._unuseHandlers = [];\n    }\n    //注册\n    /**\n     * 注册事件，可以注册多个\n     * @param key 事件名\n     * @param listener 监听回调\n     * @param context 上下文\n     * @param args 透传参数\n     * @param once 是否监听一次\n     * \n     */\n    public on<keyType extends keyof MsgKeyType = any>(\n        handler: keyType | broadcast.IListenerHandler<keyType, ValueType, ResultType> | broadcast.IListenerHandler<keyType, ValueType, ResultType>[],\n        listener?: broadcast.Listener<ValueType[broadcast.ToAnyIndexKey<keyType, ValueType>], ResultType[broadcast.ToAnyIndexKey<keyType, ResultType>]>,\n        context?: any,\n        once?: boolean,\n        args?: any[]\n    ) {\n        if (typeof handler === \"string\") {\n            if (!listener) return;\n            this._addHandler(this._getHandler(handler, listener, context, once, args));\n        } else {\n            if (this._isArr(handler)) {\n                const handlers: broadcast.IListenerHandler[] = handler as any;\n                for (let i = 0; i < handlers.length; i++) {\n                    this._addHandler(handlers[i]);\n                }\n            } else {\n                this._addHandler(handler as any);\n            }\n        }\n\n    }\n    public has(key: keyof MsgKeyType) {\n        return this._handlerMap && !!this._handlerMap[key]\n    }\n\n    public offAllByContext(context: any) {\n        const handlerMap = this._handlerMap;\n        if (context && handlerMap) {\n            for (const key in handlerMap) {\n                if (handlerMap[key]) {\n                    this.off(key, null, context);\n                }\n\n            }\n        }\n    }\n    /**\n     * 注销指定事件的所有监听\n     * @param key \n     */\n    public offAll(key?: keyof MsgKeyType) {\n        if (this._isStringNull(key)) {\n            return;\n        }\n        const handlerMap = this._handlerMap;\n        const stickyMap = this._stickHandlersMap;\n        const valueMap = this._valueMap;\n        if (stickyMap) stickyMap[key] = undefined;\n        if (handlerMap) {\n            const handlers: broadcast.IListenerHandler[] = handlerMap[key] as any;\n            if (this._isArr(handlers)) {\n                for (let i = 0; i < handlers.length; i++) {\n                    this._recoverHandler(handlers[i]);\n                }\n            } else {\n                this._recoverHandler(handlers as any);\n            }\n            handlerMap[key] = undefined\n        }\n        if (valueMap) valueMap[key] = undefined;\n\n    }\n    public off(key: keyof MsgKeyType, listener: broadcast.Listener, context?: any, onceOnly?: boolean) {\n        if (this._isStringNull(key)) return;\n        const handlerMap = this._handlerMap;\n        if (!handlerMap || !handlerMap[key]) return this;\n        let handler: broadcast.IListenerHandler = handlerMap[key] as any;\n        if (handler !== undefined && handler !== null) {\n            let handlers: broadcast.IListenerHandler[];\n            if (!this._isArr(handler)) {\n                if ((!context || handler.context === context)\n                    && (listener == null || handler.listener === listener)\n                    && (!onceOnly || handler.once)) {\n                    this._recoverHandler(handler);\n                    handlerMap[key] = undefined;\n                }\n            } else {\n                handlers = handler as any;\n                //倒序遍历做删除,将要删除的移到末尾，pop出去，时间复杂度O(1)\n                let endIndex = handlers.length - 1;\n                for (let i = endIndex; i >= 0; i--) {\n                    handler = handlers[i];\n                    if (handler && (!context || handler.context === context)\n                        && (listener == null || handler.listener === listener)\n                        && (!onceOnly || handler.once)) {\n                        endIndex = handlers.length - 1;\n                        if (i !== endIndex) {\n                            handler = handlers[endIndex];\n                            handlers[endIndex] = handlers[i];\n                            handlers[i] = handler;\n                        }\n                        this._recoverHandler(handlers.pop());\n\n                    }\n                }\n                if (!handlers.length) {\n                    handlerMap[key] = undefined;\n                }\n                // let count: number = 0;\n                // for (let i: number = 0; i < handlers.length; i++) {\n                //     const item: IListenerHandler<KeyType> = handlers[i];\n                //     if (!item) {\n                //         count++;\n                //         continue;\n                //     }\n                //     if (item && (!context || item.context === context)\n                //         && (listener == null || item.listener === listener)\n                //         && (!onceOnly || item.once)) {\n                //         count++;\n                //         handlers[i] = undefined;\n                //     }\n                // }\n                // //如果全部移除，则删除索引\n                // if (count === handlers.length) {\n                //     handlerMap[key] = undefined;\n                // } else {\n                //     const newHandlers: IListenerHandler<KeyType>[] = [];\n                //     for (let i = 0; i < handlers.length; i++) {\n                //         handlers[i] && newHandlers.push(handlers[i]);\n                //     }\n                //     handlerMap[key] = newHandlers;\n                // }\n            }\n        }\n\n        return this;\n    }\n    //广播\n    /**\n     * 广播\n     * @param key 事件名\n     * @param value 数据\n     * @param callback 回调\n     * @param persistence 是否持久化数据\n     */\n    public broadcast<keyType extends keyof MsgKeyType = any>(\n        key: keyType, value?: ValueType[broadcast.ToAnyIndexKey<keyType, ValueType>],\n        callback?: broadcast.ResultCallBack<ResultType[broadcast.ToAnyIndexKey<keyType, ResultType>]>,\n        persistence?: boolean) {\n        const handlerMap = this._handlerMap;\n        if (!handlerMap) return;\n        const handlers = handlerMap[key];\n        if (persistence) {\n            let valueMap = this._valueMap;\n            if (!valueMap) {\n                valueMap = {} as any;\n                this._valueMap = valueMap;\n            }\n            valueMap[key] = value;\n        }\n        if (!handlers) return;\n        if (!this._isArr(handlers)) {\n            const handler = handlers as broadcast.IListenerHandler;\n            value ? Broadcast._runHandlerWithData(handler, value, callback) : Broadcast._runHandler(handler, callback);\n            if (handler.once) {\n                this._recoverHandler(handler);\n                this._handlerMap[key] = undefined;\n            }\n        } else {\n            const handlerArr = handlers as broadcast.IListenerHandler[];\n            let handler: broadcast.IListenerHandler;\n            let endIndex = handlerArr.length - 1;\n            for (let i = endIndex; i >= 0; i--) {\n                handler = handlerArr[i];\n                value ? Broadcast._runHandlerWithData(handler, value, callback) : Broadcast._runHandler(handler, callback);\n                if (handler.once) {\n                    endIndex = handlerArr.length - 1;\n                    handler = handlerArr[endIndex];\n                    handlerArr[endIndex] = handlerArr[i];\n                    handlerArr[i] = handler;\n                    this._recoverHandler(handlerArr.pop());\n                }\n            }\n            if (!handlerArr.length) {\n                this._handlerMap[key] = undefined;\n            }\n        }\n    }\n    /**\n     * 广播一条 指定 [key] 的粘性消息\n     * 如果广播系统中没有注册该类型的接收者，本条信息将被滞留在系统中。一旦有该类型接收者被注册，本条消息将会被立即发送给接收者\n     * 如果系统中已经注册有该类型的接收者，本条消息将会被立即发送给接收者。\n     * \n     * @param key 消息类型\n     * @param value 消息携带的数据。可以是任意类型或是null\n     * @param callback 能够收到接收器返回的消息\n     * @param persistence 是否持久化消息类型。持久化的消息可以在任意时刻通过 broadcast.value(key) 获取当前消息的数据包。默认情况下，未持久化的消息类型在没有接收者的时候会被移除，而持久化的消息类型则不会。开发者可以通过 [clear] 函数来移除持久化的消息类型。\n     */\n    public stickyBroadcast<keyType extends keyof MsgKeyType = any>(\n        key: keyType,\n        value?: ValueType[broadcast.ToAnyIndexKey<keyType, ValueType>],\n        callback?: broadcast.ResultCallBack<ResultType[broadcast.ToAnyIndexKey<keyType, ResultType>]>,\n        persistence?: boolean\n    ) {\n        if (this._isStringNull(key)) return;\n        const handlerMap = this._handlerMap;\n        if (handlerMap && handlerMap[key]) {\n            this.broadcast(key, value, callback, persistence);\n        } else {\n            let stickyMap = this._stickHandlersMap;\n            if (!stickyMap) {\n                stickyMap = {} as any;\n                this._stickHandlersMap = stickyMap;\n            }\n            const stickyHandlers = stickyMap[key];\n            const handler: broadcast.IStickyHandler = {\n                key: key as any,\n                value: value,\n                callback: callback,\n                persistence: persistence\n            };\n            if (!stickyHandlers) {\n                stickyMap[key] = [handler]\n            } else {\n                stickyHandlers.push(handler)\n            }\n        }\n    }\n    /**\n     * 字符串是否为空 undefined null \"\"\n     * @param str \n     */\n    protected _isStringNull(str: string | any) {\n        return !str || str.trim() === \"\";\n    }\n    /**\n     * 是否是数组\n     * @param target \n     */\n    protected _isArr(target: any) {\n        return Object.prototype.toString.call(target) === \"[object Array]\";\n    }\n    /**\n     * 将广播的数据作为参数，执行广播监听器的逻辑\n     * @param handler 广播监听器\n     * @param data 广播的消息数据\n     */\n    protected static _runHandlerWithData(handler: broadcast.IListenerHandler, data: any, callback: broadcast.Listener) {\n        if (handler.listener == null) return null;\n        let result: any;\n        if (data == null) {\n            const args = handler.args ? handler.args.unshift(callback) : [callback];\n            result = handler.listener.apply(handler.context, args);\n        }\n        else if (!handler.args && !data.unshift) result = handler.listener.apply(handler.context, [data, callback]);\n        else if (handler.args) result = handler.listener.apply(handler.context, [data, callback].concat(handler.args));\n        else result = handler.listener.apply(handler.context, [data, callback]);\n        return result;\n    }\n    /**\n     * 执行广播监听者的逻辑\n     * @param handler \n     */\n    protected static _runHandler(handler: broadcast.IListenerHandler, callback: broadcast.Listener) {\n        if (handler.listener == null) return null;\n        const args = handler.args ? handler.args.unshift(callback) : [callback];\n        const result: any = handler.listener.apply(handler.context, args);\n        return result;\n    }\n    /**\n     * 回收handler\n     * @param handler \n     */\n    protected _recoverHandler(handler: broadcast.IListenerHandler) {\n        handler.args = undefined;\n        handler.context = undefined;\n        handler.listener = undefined;\n        handler.key = undefined;\n        this._unuseHandlers.push(handler);\n    }\n    /**\n     * 获取handler\n     * @param key \n     * @param listener \n     * @param context \n     * @param once \n     * @param args \n     */\n    protected _getHandler(key: string, listener: any, context: any, once: boolean, args: any[]) {\n        const unuseHandlers = this._unuseHandlers;\n        let handler: broadcast.IListenerHandler;\n        if (unuseHandlers.length) {\n            handler = unuseHandlers.pop();\n        } else {\n            handler = {} as any;\n        }\n        handler.key = key;\n        handler.listener = listener;\n        handler.context = context;\n        handler.once = once;\n        handler.args = args;\n        return handler;\n    }\n    /**\n     * 添加广播监听\n     * 如果是监听1次，则会移除上一次相同的监听\n     * 会判断是否有粘性广播，如果有就会触发广播\n     * @param handler \n     */\n    protected _addHandler(handler: broadcast.IListenerHandler) {\n        let handlerMap = this._handlerMap;\n        if (handler.once) {\n            this.off(handler.key, handler.listener, handler.context, handler.once);\n        }\n        if (!handlerMap) {\n            handlerMap = {} as any;\n            this._handlerMap = handlerMap;\n        }\n        const events = handlerMap[handler.key];\n        if (events) {\n            if (this._isArr(events)) {\n                (events as broadcast.IListenerHandler[]).push(handler);\n            } else {\n                handlerMap[handler.key] = [events as any, handler];\n            }\n        } else {\n            handlerMap[handler.key] = handler;\n        }\n        const stickyMap = this._stickHandlersMap;\n        if (stickyMap) {\n            const stickyHandlers = stickyMap[handler.key];\n            if (stickyHandlers) {\n                let handler: broadcast.IStickyHandler;\n                for (let i = 0; i < stickyHandlers.length; i++) {\n                    handler = stickyHandlers[i];\n                    this.broadcast(handler.key as any, handler.value, handler.callback, handler.persistence);\n                }\n                stickyMap[handler.key] = undefined;\n            }\n        }\n        if (handler.key !== this.keys.onListenerOn) {\n            this.broadcast(this.keys.onListenerOn, handler.key);\n        }\n\n    }\n    /**\n     * 取值\n     * @param key \n     */\n    public value<keyType extends keyof MsgKeyType = any>(key: keyType): ValueType[broadcast.ToAnyIndexKey<keyType, ValueType>] {\n        return this._valueMap && this._valueMap[key];\n    }\n    /**\n     * 销毁广播系统\n     */\n    public dispose() {\n        this._handlerMap = undefined;\n        this._stickHandlersMap = undefined;\n        this._valueMap = undefined;\n    }\n\n}"],"names":[],"mappings":"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"}