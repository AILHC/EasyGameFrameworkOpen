{"version":3,"file":"broadcast.js","sources":["@ailhc/broadcast/src/broadcast.ts"],"sourcesContent":["\r\n/**\r\n * @author AILHC 505126057@qq.com\r\n */\r\nexport class Broadcast<MsgKeyType extends broadcast.IMsgKey, ValueType = any, ResultType = any>\r\n    implements broadcast.IBroadcast<MsgKeyType, ValueType, ResultType>{\r\n\r\n    public keys: { [key in keyof MsgKeyType]: MsgKeyType[key] };\r\n    private _valueMap: { [key in keyof MsgKeyType]: any };\r\n    private _handlerMap: { [key in keyof MsgKeyType]: broadcast.IListenerHandler | broadcast.IListenerHandler[] };\r\n    private _stickHandlersMap: { [key in keyof MsgKeyType]: broadcast.IStickyHandler[] };\r\n    protected _unuseHandlers: any[]\r\n    constructor() {\r\n        this.keys = new Proxy({} as any, {\r\n            get: (target, p) => {\r\n                return p;\r\n            }\r\n        })\r\n        this._valueMap = {} as any;\r\n        this._unuseHandlers = [];\r\n    }\r\n    //注册\r\n    /**\r\n     * 注册事件，可以注册多个\r\n     * @param key 事件名\r\n     * @param listener 监听回调\r\n     * @param context 上下文\r\n     * @param args 透传参数\r\n     * @param once 是否监听一次\r\n     * \r\n     */\r\n    public on<keyType extends keyof MsgKeyType = any>(\r\n        handler: keyType | broadcast.IListenerHandler<keyType, ValueType, ResultType> | broadcast.IListenerHandler<keyType, ValueType, ResultType>[],\r\n        listener?: broadcast.Listener<ValueType[broadcast.ToAnyIndexKey<keyType, ValueType>], ResultType[broadcast.ToAnyIndexKey<keyType, ResultType>]>,\r\n        context?: any,\r\n        once?: boolean,\r\n        args?: any[]\r\n    ) {\r\n        if (typeof handler === \"string\") {\r\n            if (!listener) return;\r\n            this._addHandler(this._getHandler(handler, listener, context, once, args));\r\n        } else {\r\n            if (this._isArr(handler)) {\r\n                const handlers: broadcast.IListenerHandler[] = handler as any;\r\n                for (let i = 0; i < handlers.length; i++) {\r\n                    this._addHandler(handlers[i]);\r\n                }\r\n            } else {\r\n                this._addHandler(handler as any);\r\n            }\r\n        }\r\n\r\n    }\r\n    public has(key: keyof MsgKeyType) {\r\n        return this._handlerMap && !!this._handlerMap[key]\r\n    }\r\n\r\n    public offAllByContext(context: any) {\r\n        const handlerMap = this._handlerMap;\r\n        if (context && handlerMap) {\r\n            for (const key in handlerMap) {\r\n                if (handlerMap[key]) {\r\n                    this.off(key, null, context);\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 注销指定事件的所有监听\r\n     * @param key \r\n     */\r\n    public offAll(key?: keyof MsgKeyType) {\r\n        if (this._isStringNull(key)) {\r\n            return;\r\n        }\r\n        const handlerMap = this._handlerMap;\r\n        const stickyMap = this._stickHandlersMap;\r\n        const valueMap = this._valueMap;\r\n        if (stickyMap) stickyMap[key] = undefined;\r\n        if (handlerMap) {\r\n            const handlers: broadcast.IListenerHandler[] = handlerMap[key] as any;\r\n            if (this._isArr(handlers)) {\r\n                for (let i = 0; i < handlers.length; i++) {\r\n                    this._recoverHandler(handlers[i]);\r\n                }\r\n            } else {\r\n                this._recoverHandler(handlers as any);\r\n            }\r\n            handlerMap[key] = undefined\r\n        }\r\n        if (valueMap) valueMap[key] = undefined;\r\n\r\n    }\r\n    public off(key: keyof MsgKeyType, listener: broadcast.Listener, context?: any, onceOnly?: boolean) {\r\n        if (this._isStringNull(key)) return;\r\n        const handlerMap = this._handlerMap;\r\n        if (!handlerMap || !handlerMap[key]) return this;\r\n        let handler: broadcast.IListenerHandler = handlerMap[key] as any;\r\n        if (handler !== undefined && handler !== null) {\r\n            let handlers: broadcast.IListenerHandler[];\r\n            if (!this._isArr(handler)) {\r\n                if ((!context || handler.context === context)\r\n                    && (listener == null || handler.listener === listener)\r\n                    && (!onceOnly || handler.once)) {\r\n                    this._recoverHandler(handler);\r\n                    handlerMap[key] = undefined;\r\n                }\r\n            } else {\r\n                handlers = handler as any;\r\n                //倒序遍历做删除,将要删除的移到末尾，pop出去，时间复杂度O(1)\r\n                let endIndex = handlers.length - 1;\r\n                for (let i = endIndex; i >= 0; i--) {\r\n                    handler = handlers[i];\r\n                    if (handler && (!context || handler.context === context)\r\n                        && (listener == null || handler.listener === listener)\r\n                        && (!onceOnly || handler.once)) {\r\n                        endIndex = handlers.length - 1;\r\n                        if (i !== endIndex) {\r\n                            handler = handlers[endIndex];\r\n                            handlers[endIndex] = handlers[i];\r\n                            handlers[i] = handler;\r\n                        }\r\n                        this._recoverHandler(handlers.pop());\r\n\r\n                    }\r\n                }\r\n                if (!handlers.length) {\r\n                    handlerMap[key] = undefined;\r\n                }\r\n                // let count: number = 0;\r\n                // for (let i: number = 0; i < handlers.length; i++) {\r\n                //     const item: IListenerHandler<KeyType> = handlers[i];\r\n                //     if (!item) {\r\n                //         count++;\r\n                //         continue;\r\n                //     }\r\n                //     if (item && (!context || item.context === context)\r\n                //         && (listener == null || item.listener === listener)\r\n                //         && (!onceOnly || item.once)) {\r\n                //         count++;\r\n                //         handlers[i] = undefined;\r\n                //     }\r\n                // }\r\n                // //如果全部移除，则删除索引\r\n                // if (count === handlers.length) {\r\n                //     handlerMap[key] = undefined;\r\n                // } else {\r\n                //     const newHandlers: IListenerHandler<KeyType>[] = [];\r\n                //     for (let i = 0; i < handlers.length; i++) {\r\n                //         handlers[i] && newHandlers.push(handlers[i]);\r\n                //     }\r\n                //     handlerMap[key] = newHandlers;\r\n                // }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n    //广播\r\n    /**\r\n     * 广播\r\n     * @param key 事件名\r\n     * @param value 数据\r\n     * @param callback 回调\r\n     * @param persistence 是否持久化数据\r\n     */\r\n    public broadcast<keyType extends keyof MsgKeyType = any>(\r\n        key: keyType, value?: ValueType[broadcast.ToAnyIndexKey<keyType, ValueType>],\r\n        callback?: broadcast.ResultCallBack<ResultType[broadcast.ToAnyIndexKey<keyType, ResultType>]>,\r\n        persistence?: boolean) {\r\n        const handlerMap = this._handlerMap;\r\n        if (!handlerMap) return;\r\n        const handlers = handlerMap[key];\r\n        if (persistence) {\r\n            let valueMap = this._valueMap;\r\n            if (!valueMap) {\r\n                valueMap = {} as any;\r\n                this._valueMap = valueMap;\r\n            }\r\n            valueMap[key] = value;\r\n        }\r\n        if (!handlers) return;\r\n        if (!this._isArr(handlers)) {\r\n            const handler = handlers as broadcast.IListenerHandler;\r\n            value ? Broadcast._runHandlerWithData(handler, value, callback) : Broadcast._runHandler(handler, callback);\r\n            if (handler.once) {\r\n                this._recoverHandler(handler);\r\n                this._handlerMap[key] = undefined;\r\n            }\r\n        } else {\r\n            const handlerArr = handlers as broadcast.IListenerHandler[];\r\n            let handler: broadcast.IListenerHandler;\r\n            let endIndex = handlerArr.length - 1;\r\n            for (let i = endIndex; i >= 0; i--) {\r\n                handler = handlerArr[i];\r\n                value ? Broadcast._runHandlerWithData(handler, value, callback) : Broadcast._runHandler(handler, callback);\r\n                if (handler.once) {\r\n                    endIndex = handlerArr.length - 1;\r\n                    handler = handlerArr[endIndex];\r\n                    handlerArr[endIndex] = handlerArr[i];\r\n                    handlerArr[i] = handler;\r\n                    this._recoverHandler(handlerArr.pop());\r\n                }\r\n            }\r\n            if (!handlerArr.length) {\r\n                this._handlerMap[key] = undefined;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 广播一条 指定 [key] 的粘性消息\r\n     * 如果广播系统中没有注册该类型的接收者，本条信息将被滞留在系统中。一旦有该类型接收者被注册，本条消息将会被立即发送给接收者\r\n     * 如果系统中已经注册有该类型的接收者，本条消息将会被立即发送给接收者。\r\n     * \r\n     * @param key 消息类型\r\n     * @param value 消息携带的数据。可以是任意类型或是null\r\n     * @param callback 能够收到接收器返回的消息\r\n     * @param persistence 是否持久化消息类型。持久化的消息可以在任意时刻通过 broadcast.value(key) 获取当前消息的数据包。默认情况下，未持久化的消息类型在没有接收者的时候会被移除，而持久化的消息类型则不会。开发者可以通过 [clear] 函数来移除持久化的消息类型。\r\n     */\r\n    public stickyBroadcast<keyType extends keyof MsgKeyType = any>(\r\n        key: keyType,\r\n        value?: ValueType[broadcast.ToAnyIndexKey<keyType, ValueType>],\r\n        callback?: broadcast.ResultCallBack<ResultType[broadcast.ToAnyIndexKey<keyType, ResultType>]>,\r\n        persistence?: boolean\r\n    ) {\r\n        if (this._isStringNull(key)) return;\r\n        const handlerMap = this._handlerMap;\r\n        if (handlerMap && handlerMap[key]) {\r\n            this.broadcast(key, value, callback, persistence);\r\n        } else {\r\n            let stickyMap = this._stickHandlersMap;\r\n            if (!stickyMap) {\r\n                stickyMap = {} as any;\r\n                this._stickHandlersMap = stickyMap;\r\n            }\r\n            const stickyHandlers = stickyMap[key];\r\n            const handler: broadcast.IStickyHandler = {\r\n                key: key as any,\r\n                value: value,\r\n                callback: callback,\r\n                persistence: persistence\r\n            };\r\n            if (!stickyHandlers) {\r\n                stickyMap[key] = [handler]\r\n            } else {\r\n                stickyHandlers.push(handler)\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 字符串是否为空 undefined null \"\"\r\n     * @param str \r\n     */\r\n    protected _isStringNull(str: string | any) {\r\n        return !str || str.trim() === \"\";\r\n    }\r\n    /**\r\n     * 是否是数组\r\n     * @param target \r\n     */\r\n    protected _isArr(target: any) {\r\n        return Object.prototype.toString.call(target) === \"[object Array]\";\r\n    }\r\n    /**\r\n     * 将广播的数据作为参数，执行广播监听器的逻辑\r\n     * @param handler 广播监听器\r\n     * @param data 广播的消息数据\r\n     */\r\n    protected static _runHandlerWithData(handler: broadcast.IListenerHandler, data: any, callback: broadcast.Listener) {\r\n        if (handler.listener == null) return null;\r\n        let result: any;\r\n        if (data == null) {\r\n            const args = handler.args ? handler.args.unshift(callback) : [callback];\r\n            result = handler.listener.apply(handler.context, args);\r\n        }\r\n        else if (!handler.args && !data.unshift) result = handler.listener.apply(handler.context, [data, callback]);\r\n        else if (handler.args) result = handler.listener.apply(handler.context, [data, callback].concat(handler.args));\r\n        else result = handler.listener.apply(handler.context, [data, callback]);\r\n        return result;\r\n    }\r\n    /**\r\n     * 执行广播监听者的逻辑\r\n     * @param handler \r\n     */\r\n    protected static _runHandler(handler: broadcast.IListenerHandler, callback: broadcast.Listener) {\r\n        if (handler.listener == null) return null;\r\n        const args = handler.args ? handler.args.unshift(callback) : [callback];\r\n        const result: any = handler.listener.apply(handler.context, args);\r\n        return result;\r\n    }\r\n    /**\r\n     * 回收handler\r\n     * @param handler \r\n     */\r\n    protected _recoverHandler(handler: broadcast.IListenerHandler) {\r\n        handler.args = undefined;\r\n        handler.context = undefined;\r\n        handler.listener = undefined;\r\n        handler.key = undefined;\r\n        this._unuseHandlers.push(handler);\r\n    }\r\n    /**\r\n     * 获取handler\r\n     * @param key \r\n     * @param listener \r\n     * @param context \r\n     * @param once \r\n     * @param args \r\n     */\r\n    protected _getHandler(key: string, listener: any, context: any, once: boolean, args: any[]) {\r\n        const unuseHandlers = this._unuseHandlers;\r\n        let handler: broadcast.IListenerHandler;\r\n        if (unuseHandlers.length) {\r\n            handler = unuseHandlers.pop();\r\n        } else {\r\n            handler = {} as any;\r\n        }\r\n        handler.key = key;\r\n        handler.listener = listener;\r\n        handler.context = context;\r\n        handler.once = once;\r\n        handler.args = args;\r\n        return handler;\r\n    }\r\n    /**\r\n     * 添加广播监听\r\n     * 如果是监听1次，则会移除上一次相同的监听\r\n     * 会判断是否有粘性广播，如果有就会触发广播\r\n     * @param handler \r\n     */\r\n    protected _addHandler(handler: broadcast.IListenerHandler) {\r\n        let handlerMap = this._handlerMap;\r\n        if (handler.once) {\r\n            this.off(handler.key, handler.listener, handler.context, handler.once);\r\n        }\r\n        if (!handlerMap) {\r\n            handlerMap = {} as any;\r\n            this._handlerMap = handlerMap;\r\n        }\r\n        const events = handlerMap[handler.key];\r\n        if (events) {\r\n            if (this._isArr(events)) {\r\n                (events as broadcast.IListenerHandler[]).push(handler);\r\n            } else {\r\n                handlerMap[handler.key] = [events as any, handler];\r\n            }\r\n        } else {\r\n            handlerMap[handler.key] = handler;\r\n        }\r\n        const stickyMap = this._stickHandlersMap;\r\n        if (stickyMap) {\r\n            const stickyHandlers = stickyMap[handler.key];\r\n            if (stickyHandlers) {\r\n                let handler: broadcast.IStickyHandler;\r\n                for (let i = 0; i < stickyHandlers.length; i++) {\r\n                    handler = stickyHandlers[i];\r\n                    this.broadcast(handler.key as any, handler.value, handler.callback, handler.persistence);\r\n                }\r\n                stickyMap[handler.key] = undefined;\r\n            }\r\n        }\r\n        if (handler.key !== this.keys.onListenerOn) {\r\n            this.broadcast(this.keys.onListenerOn, handler.key);\r\n        }\r\n\r\n    }\r\n    /**\r\n     * 取值\r\n     * @param key \r\n     */\r\n    public value<keyType extends keyof MsgKeyType = any>(key: keyType): ValueType[broadcast.ToAnyIndexKey<keyType, ValueType>] {\r\n        return this._valueMap && this._valueMap[key];\r\n    }\r\n    /**\r\n     * 销毁广播系统\r\n     */\r\n    public dispose() {\r\n        this._handlerMap = undefined;\r\n        this._stickHandlersMap = undefined;\r\n        this._valueMap = undefined;\r\n    }\r\n\r\n}"],"names":[],"mappings":"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"}