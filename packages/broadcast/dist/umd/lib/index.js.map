{"version":3,"file":"index.js","sources":["../../../src/broadcast.ts"],"sourcesContent":["type IListenerHandler<T> = broadcast.IListenerHandler<T>;\nexport class Broadcast<KeyType extends broadcast.IMsgKey, T = any> {\n    public keyMap: { [key in keyof KeyType]: any };\n    private _valueMap: { [key in keyof KeyType]: any };\n    private _handlerMap: { [key in keyof KeyType]: IListenerHandler<KeyType> | IListenerHandler<KeyType>[] };\n    private _stickBroadcasterMap: { [key in keyof KeyType]: broadcast.IBroadcaster<KeyType>[] };\n    constructor() {\n        this.keyMap = new Proxy({} as any, {\n            get: (target, p) => {\n                return p;\n            }\n        })\n        this._valueMap = {} as any;\n\n    }\n    //注册\n    /**\n     * 注册事件\n     * @param key 事件名\n     * @param listener 监听回调\n     * @param context 上下文\n     * @param args 透传参数\n     * @param more 注册多个\n     */\n    public on(handler?: IListenerHandler<KeyType>[] | IListenerHandler<KeyType>) {\n        if (this._isArr(handler)) {\n            const handlers = (handler as IListenerHandler<KeyType>[]);\n            for (let i = 0; i < handlers.length; i++) {\n                this._addHandler(handlers[i]);\n            }\n        } else {\n            this._addHandler(handler as IListenerHandler<KeyType>);\n        }\n    }\n    public has(key: keyof KeyType) {\n        return this._handlerMap && !!this._handlerMap[key]\n    }\n\n    public offAllByContext(context: any) {\n        const handlerMap = this._handlerMap;\n        if (context && handlerMap) {\n            for (const key in handlerMap) {\n                if (handlerMap[key]) {\n                    this.off(key, null, context);\n                }\n\n            }\n        }\n    }\n    /**\n     * 注销\n     * @param key \n     */\n    public offAll(key?: keyof KeyType) {\n        if (this._isStringNull(key)) {\n            this._handlerMap = undefined;\n            this._stickBroadcasterMap = undefined;\n            this._valueMap = undefined;\n            return;\n        }\n        const handlerMap = this._handlerMap;\n        const stickyMap = this._stickBroadcasterMap;\n        const valueMap = this._valueMap;\n        if (stickyMap) stickyMap[key] = undefined;\n        if (handlerMap) handlerMap[key] = undefined;\n        if (valueMap) valueMap[key] = undefined;\n\n    }\n    public off(key: keyof KeyType, listener: broadcast.Listener, context?: any, onceOnly?: boolean) {\n        if (this._isStringNull(key)) return;\n        const handlerMap = this._handlerMap;\n        if (!handlerMap || !handlerMap[key]) return this;\n        let handler = handlerMap[key] as IListenerHandler<KeyType>;\n        if (handler !== undefined && handler !== null) {\n            let handlers: IListenerHandler<KeyType>[];\n            if (!this._isArr(handler)) {\n                if ((!context || handler.context === context)\n                    && (listener == null || handler.listener === listener)\n                    && (!onceOnly || handler.once)) {\n                    handlerMap[key] = undefined;\n                }\n            } else {\n                handlers = handler as any;\n                //倒序遍历做删除,将要删除的移到末尾，pop出去，时间复杂度O(1)\n                let endIndex = handlers.length - 1;\n                for (let i = endIndex; i >= 0; i--) {\n                    handler = handlers[i];\n                    if (handler && (!context || handler.context === context)\n                        && (listener == null || handler.listener === listener)\n                        && (!onceOnly || handler.once)) {\n                        endIndex = handlers.length - 1;\n                        if (i !== endIndex) {\n                            handler = handlers[endIndex];\n                            handlers[endIndex] = handlers[i];\n                            handlers[i] = handler;\n                        }\n                        handlers.pop();\n\n                    }\n                }\n                if (!handlers.length) {\n                    handlerMap[key] = undefined;\n                }\n                // let count: number = 0;\n                // for (let i: number = 0; i < handlers.length; i++) {\n                //     const item: IListenerHandler<KeyType> = handlers[i];\n                //     if (!item) {\n                //         count++;\n                //         continue;\n                //     }\n                //     if (item && (!context || item.context === context)\n                //         && (listener == null || item.listener === listener)\n                //         && (!onceOnly || item.once)) {\n                //         count++;\n                //         handlers[i] = undefined;\n                //     }\n                // }\n                // //如果全部移除，则删除索引\n                // if (count === handlers.length) {\n                //     handlerMap[key] = undefined;\n                // } else {\n                //     const newHandlers: IListenerHandler<KeyType>[] = [];\n                //     for (let i = 0; i < handlers.length; i++) {\n                //         handlers[i] && newHandlers.push(handlers[i]);\n                //     }\n                //     handlerMap[key] = newHandlers;\n                // }\n            }\n        }\n\n        return this;\n    }\n    //广播\n    /**\n     * 广播\n     * @param key 事件名\n     * @param value 数据\n     * @param callback 回调\n     * @param persistence 是否持久化数据\n     */\n    public broadcast<T = any>(key: keyof KeyType, value?: T, callback?: broadcast.ResultCallBack, persistence?: boolean) {\n        const handlerMap = this._handlerMap;\n        if (!handlerMap) return;\n        const handlers = handlerMap[key];\n        if (persistence) {\n            let valueMap = this._valueMap;\n            if (!valueMap) {\n                valueMap = {} as any;\n                this._valueMap = valueMap;\n            }\n            valueMap[key] = value;\n        }\n        if (!handlers) return;\n        if (!this._isArr(handlers)) {\n            const handler = handlers as IListenerHandler<KeyType>;\n            value ? Broadcast._runHandlerWithData(handler, value, callback) : Broadcast._runHandler(handler, callback);\n            if (handler.once) {\n                this._handlerMap[key] = undefined;\n            }\n        } else {\n            const handlerArr = handlers as IListenerHandler<KeyType>[];\n            let handler: IListenerHandler<KeyType>;\n            let endIndex = handlerArr.length - 1;\n            for (let i = endIndex; i >= 0; i--) {\n                handler = handlerArr[i];\n                value ? Broadcast._runHandlerWithData(handler, value, callback) : Broadcast._runHandler(handler, callback);\n                if (handler.once) {\n                    endIndex = handlerArr.length - 1;\n                    handler = handlerArr[endIndex];\n                    handlerArr[endIndex] = handlerArr[i];\n                    handlerArr[i] = handler;\n                    handlerArr.pop();\n                }\n            }\n            if (!handlerArr.length) {\n                this._handlerMap[key] = undefined;\n            }\n        }\n    }\n    /**\n     * 广播一条 指定 [key] 的粘性消息\n     * 如果广播系统中没有注册该类型的接收者，本条信息将被滞留在系统中。一旦有该类型接收者被注册，本条消息将会被立即发送给接收者\n     * 如果系统中已经注册有该类型的接收者，本条消息将会被立即发送给接收者。\n     * \n     * @param key 消息类型\n     * @param value 消息携带的数据。可以是任意类型或是null\n     * @param callback 能够收到接收器返回的消息\n     * @param persistence 是否持久化消息类型。持久化的消息可以在任意时刻通过 broadcast.value(key) 获取当前消息的数据包。默认情况下，未持久化的消息类型在没有接收者的时候会被移除，而持久化的消息类型则不会。开发者可以通过 [clear] 函数来移除持久化的消息类型。\n     */\n    public stickyBroadcast(key: keyof KeyType, value?: T, callback?: broadcast.ResultCallBack, persistence?: boolean) {\n        if (this._isStringNull(key)) return;\n        const handlerMap = this._handlerMap;\n        if (handlerMap && handlerMap[key]) {\n            this.broadcast(key, value, callback, persistence);\n        } else {\n            let stickyMap = this._stickBroadcasterMap;\n            if (!stickyMap) {\n                stickyMap = {} as any;\n                this._stickBroadcasterMap = stickyMap;\n            }\n            const broadcasters = stickyMap[key];\n            const broadcaster: broadcast.IBroadcaster<KeyType> = {\n                key: key,\n                value: value,\n                callback: callback,\n                persistence: persistence\n            };\n            if (!broadcasters) {\n                stickyMap[key] = [broadcaster]\n            } else {\n                broadcasters.push(broadcaster)\n            }\n        }\n    }\n    /**\n     * 字符串是否为空 undefined null \"\"\n     * @param str \n     */\n    protected _isStringNull(str: string | any) {\n        return !str || str.trim() === \"\";\n    }\n    /**\n     * 是否是数组\n     * @param target \n     */\n    protected _isArr(target: any) {\n        return Object.prototype.toString.call(target) === \"[object Array]\";\n    }\n    /**\n     * 将广播的数据作为参数，执行广播监听器的逻辑\n     * @param handler 广播监听器\n     * @param data 广播的消息数据\n     */\n    protected static _runHandlerWithData(handler: IListenerHandler<any>, data: any, callback: broadcast.Listener) {\n        if (handler.listener == null) return null;\n        let result: any;\n        if (data == null) {\n            const args = handler.args ? handler.args.unshift(callback) : [callback];\n            result = handler.listener.apply(handler.context, args);\n        }\n        else if (!handler.args && !data.unshift) result = handler.listener.apply(handler.context, [data, callback]);\n        else if (handler.args) result = handler.listener.apply(handler.context, [data, callback].concat(handler.args));\n        else result = handler.listener.apply(handler.context, [data, callback]);\n        return result;\n    }\n    /**\n     * 执行广播监听者的逻辑\n     * @param handler \n     */\n    protected static _runHandler(handler: IListenerHandler<any>, callback: broadcast.Listener) {\n        if (handler.listener == null) return null;\n        const args = handler.args ? handler.args.unshift(callback) : [callback];\n        const result: any = handler.listener.apply(handler.context, args);\n        return result;\n    }\n    /**\n     * 添加广播监听\n     * 如果是监听1次，则会移除上一次相同的监听\n     * 会判断是否有粘性广播，如果有就会触发广播\n     * @param handler \n     */\n    protected _addHandler(handler: IListenerHandler<KeyType>) {\n        let handlerMap = this._handlerMap;\n        if (handler.once) {\n            this.off(handler.key, handler.listener, handler.context, handler.once);\n        }\n        if (!handlerMap) {\n            handlerMap = {} as any;\n            this._handlerMap = handlerMap;\n        }\n        const events = handlerMap[handler.key];\n        if (events) {\n            if (this._isArr(events)) {\n                (events as IListenerHandler<KeyType>[]).push(handler);\n            } else {\n                handlerMap[handler.key] = [events as any, handler];\n            }\n        } else {\n            handlerMap[handler.key] = handler;\n        }\n        const stickyMap = this._stickBroadcasterMap;\n        if (stickyMap) {\n            const stickyBroadcasters = stickyMap[handler.key];\n            if (stickyBroadcasters) {\n                let broadcaster: broadcast.IBroadcaster<KeyType>;\n                for (let i = 0; i < stickyBroadcasters.length; i++) {\n                    broadcaster = stickyBroadcasters[i];\n                    this.broadcast(broadcaster.key, broadcaster.value, broadcaster.callback, broadcaster.persistence);\n                }\n                stickyMap[handler.key] = undefined;\n            }\n        }\n        if (handler.key !== this.keyMap.onListenerOn) {\n            this.broadcast(this.keyMap.onListenerOn, handler.key);\n        }\n\n    }\n    /**\n     * 取值\n     * @param key \n     */\n    public value(key: keyof KeyType): T[keyof T] {\n        return this._valueMap && this._valueMap[key];\n    }\n    /**\n     * 销毁广播系统\n     */\n    public dispose() {\n        this._handlerMap = undefined;\n        this._stickBroadcasterMap = undefined;\n        this._valueMap = undefined;\n    }\n\n}"],"names":[],"mappings":"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"}