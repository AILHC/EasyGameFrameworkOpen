{"version":3,"file":"index.js","sources":["../../../src/dp-ctrl-mgr.ts"],"sourcesContent":["/**\n * DisplayControllerMgr\n * 显示控制类管理器基类\n */\nexport class DpcMgr<\n    CtrlKeyMapType = any,\n    InitDataTypeMapType = any,\n    ShowDataTypeMapType = any,\n    UpdateDataTypeMapType = any>\n    implements displayCtrl.IMgr<\n    CtrlKeyMapType,\n    InitDataTypeMapType,\n    ShowDataTypeMapType,\n    UpdateDataTypeMapType> {\n\n\n    keys: CtrlKeyMapType = new Proxy({}, {\n        get(target, key) {\n            return key;\n        }\n    }) as any;\n    /**\n     * 单例缓存字典 key:ctrlKey,value:egf.IDpCtrl\n     */\n    protected _sigCtrlCache: displayCtrl.CtrlInsMap = {};\n    protected _sigCtrlShowCfgMap: { [P in keyof CtrlKeyMapType]: displayCtrl.IShowConfig } = {} as any;\n    protected _resHandler: displayCtrl.IResHandler;\n    /**\n     * 控制器类字典\n     */\n    protected _ctrlClassMap: { [P in keyof CtrlKeyMapType]: displayCtrl.CtrlClassType<displayCtrl.ICtrl> } = {} as any;\n    public get sigCtrlCache(): displayCtrl.CtrlInsMap {\n        return this._sigCtrlCache;\n    }\n    public getCtrlClass<keyType extends keyof CtrlKeyMapType>(typeKey: keyType) {\n        const clas = this._ctrlClassMap[typeKey];\n        return clas;\n    }\n    public init(resHandler?: displayCtrl.IResHandler): void {\n        if (!this._resHandler) {\n            this._resHandler = resHandler;\n        }\n    }\n    public registTypes(classes: displayCtrl.CtrlClassMap | displayCtrl.CtrlClassType[]) {\n        if (classes) {\n            if (typeof classes.length === \"number\" && classes.length) {\n                for (let i = 0; i < classes.length; i++) {\n                    this.regist(classes[i]);\n                }\n            } else {\n                for (const typeKey in classes) {\n                    this.regist(classes[typeKey], typeKey as any)\n                }\n            }\n\n        }\n\n    }\n    public regist(ctrlClass: displayCtrl.CtrlClassType, typeKey?: keyof CtrlKeyMapType): void {\n        const classMap = this._ctrlClassMap;\n        if (!ctrlClass.typeKey) {\n            if (!typeKey) {\n                console.error(`typeKey is null`);\n                return;\n            } else {\n                (ctrlClass as any)[\"typeKey\"] = typeKey;\n            }\n        }\n        if (classMap[ctrlClass.typeKey]) {\n            console.error(`type:${ctrlClass.typeKey} is exit`);\n        } else {\n            classMap[ctrlClass.typeKey] = ctrlClass;\n        }\n    }\n    public isRegisted<keyType extends keyof CtrlKeyMapType>(typeKey: keyType): boolean {\n        return !!this._ctrlClassMap[typeKey];\n    }\n    public getDpcRessInClass<keyType extends keyof CtrlKeyMapType>(typeKey: keyType): any[] | string[] {\n        const clas = this._ctrlClassMap[typeKey];\n        if (clas) {\n            return clas.ress;\n        } else {\n            console.error(`This class :${typeKey} is not registered `);\n            return undefined;\n        }\n    }\n    //单例操作\n\n    public getSigDpcRess<keyType extends keyof CtrlKeyMapType>(typeKey: keyType,): string[] {\n        const ctrlIns = this.getSigDpcIns(typeKey);\n        if (ctrlIns) {\n            return ctrlIns.getRess();\n        }\n        return null;\n    }\n    public loadSigDpc<T, keyType extends keyof CtrlKeyMapType = any>(typeKey: keyType, loadCfg?: displayCtrl.ILoadConfig): displayCtrl.ReturnCtrlType<T> {\n        const ctrlIns = this.getSigDpcIns(typeKey);\n        if (ctrlIns) {\n            this.loadDpcByIns(ctrlIns, loadCfg);\n        }\n        return ctrlIns as any;\n    }\n    public getSigDpcIns<T, keyType extends keyof CtrlKeyMapType = any>(typeKey: keyType): displayCtrl.ReturnCtrlType<T> {\n        const sigCtrlCache = this._sigCtrlCache;\n        if (!typeKey) return null;\n        let ctrlIns = sigCtrlCache[typeKey];\n        if (!ctrlIns) {\n            ctrlIns = ctrlIns ? ctrlIns : this.insDpc(typeKey);\n            ctrlIns && (sigCtrlCache[typeKey] = ctrlIns);\n        }\n        return ctrlIns as any;\n    }\n    public initSigDpc<T = any, keyType extends keyof CtrlKeyMapType = any>(\n        typeKey: keyType,\n        initCfg?: displayCtrl.IInitConfig<keyType, InitDataTypeMapType>\n    ): displayCtrl.ReturnCtrlType<T> {\n        let ctrlIns: displayCtrl.ICtrl;\n        ctrlIns = this.getSigDpcIns(typeKey);\n        this.initDpcByIns(ctrlIns, initCfg);\n        return ctrlIns as any;\n    }\n    public showDpc<T, keyType extends keyof CtrlKeyMapType = any>(\n        typeKey: keyType | displayCtrl.IShowConfig<keyType, InitDataTypeMapType, ShowDataTypeMapType>,\n        onShowData?: ShowDataTypeMapType[displayCtrl.ToAnyIndexKey<keyType, ShowDataTypeMapType>],\n        showedCb?: displayCtrl.CtrlInsCb<T>,\n        onInitData?: InitDataTypeMapType[displayCtrl.ToAnyIndexKey<keyType, InitDataTypeMapType>],\n        forceLoad?: boolean,\n        onLoadData?: any,\n        loadCb?: displayCtrl.CtrlInsCb,\n        showEndCb?: VoidFunction,\n        onCancel?: VoidFunction\n    ): displayCtrl.ReturnCtrlType<T> {\n        let showCfg: displayCtrl.IShowConfig<keyType>;\n        if (typeof typeKey == \"string\") {\n            showCfg = {\n                typeKey: typeKey,\n                onShowData: onShowData,\n                showedCb: showedCb,\n                onInitData: onInitData,\n                forceLoad: forceLoad,\n                onLoadData: onLoadData,\n                showEndCb: showEndCb,\n                loadCb: loadCb,\n                onCancel: onCancel\n            }\n        } else if (typeof typeKey === \"object\") {\n            showCfg = typeKey;\n            onShowData !== undefined && (showCfg.onShowData = onShowData);\n            showedCb !== undefined && (showCfg.showedCb = showedCb);\n            showEndCb !== undefined && (showCfg.showEndCb = showEndCb);\n            onInitData !== undefined && (showCfg.onInitData = onInitData);\n            forceLoad !== undefined && (showCfg.forceLoad = forceLoad);\n            onLoadData !== undefined && (showCfg.onLoadData = onLoadData);\n            loadCb !== undefined && (showCfg.loadCb = loadCb);\n            onCancel !== undefined && (showCfg.onCancel = onCancel);\n        } else {\n            console.warn(`unknown showDpc`, typeKey);\n            return;\n        }\n        const ins = this.getSigDpcIns(showCfg.typeKey as any);\n        if (!ins) {\n            console.error(`There is no registration :typeKey:${showCfg.typeKey}`);\n            return null;\n        };\n        ins.needShow = true;\n        const sigCtrlShowCfgMap = this._sigCtrlShowCfgMap;\n        const oldShowCfg = sigCtrlShowCfgMap[showCfg.typeKey];\n        if (oldShowCfg && showCfg) {\n            oldShowCfg.onCancel && oldShowCfg.onCancel();\n            Object.assign(oldShowCfg, showCfg);\n        } else {\n            sigCtrlShowCfgMap[showCfg.typeKey] = showCfg;\n        }\n        if (ins.needLoad || showCfg.forceLoad) {\n            ins.isLoaded = false;\n            ins.needLoad = true;\n        } else if (!ins.isLoaded && !ins.isLoading) {\n            ins.needLoad = true;\n        }\n        //需要加载\n        if (ins.needLoad) {\n            const preloadCfg = showCfg as displayCtrl.ILoadConfig;\n            const loadCb = preloadCfg.loadCb;\n            preloadCfg.loadCb = (loadedIns: displayCtrl.ICtrl) => {\n                loadCb && loadCb(loadedIns);\n                if (loadedIns) {\n                    const loadedShowCfg = sigCtrlShowCfgMap[showCfg.typeKey];\n                    if (loadedIns.needShow) {\n                        this.initDpcByIns(loadedIns, loadedShowCfg);\n                        this.showDpcByIns(loadedIns, loadedShowCfg);\n                        loadedIns.needShow = false;\n                    }\n                }\n                delete sigCtrlShowCfgMap[showCfg.typeKey];\n            }\n            ins.needLoad = false;\n            this._loadRess(ins, preloadCfg);\n        } else {\n            if (!ins.isInited) {\n                this.initDpcByIns(ins, showCfg.onInitData);\n            }\n\n            if (ins.isInited) {\n                this.showDpcByIns(ins, showCfg);\n                ins.needShow = false;\n\n            }\n        }\n        return ins as any;\n    }\n    public updateDpc<keyType extends keyof CtrlKeyMapType>(\n        key: keyType,\n        updateData?: UpdateDataTypeMapType[displayCtrl.ToAnyIndexKey<keyType, UpdateDataTypeMapType>]\n    ): void {\n        if (!key) {\n            console.warn(\"!!!key is null\");\n            return;\n        }\n        const ctrlIns = this._sigCtrlCache[key];\n        if (ctrlIns && ctrlIns.isInited) {\n            ctrlIns.onUpdate(updateData);\n        } else {\n            console.warn(` updateDpc key:${key}, The instance is not initialized`);;\n        }\n    }\n    public hideDpc<keyType extends keyof CtrlKeyMapType>(key: keyType): void {\n        if (!key) {\n            console.warn(\"!!!key is null\");\n            return;\n        }\n        const dpcIns = this._sigCtrlCache[key];\n        if (!dpcIns) {\n            console.warn(`${key} Not instantiate`);\n            return;\n        }\n        this.hideDpcByIns(dpcIns)\n    }\n\n    public destroyDpc<keyType extends keyof CtrlKeyMapType>(key: keyType, destroyRes?: boolean): void {\n        if (!key || key === \"\") {\n            console.warn(\"!!!key is null\");\n            return;\n        }\n        const ins = this._sigCtrlCache[key];\n        this.destroyDpcByIns(ins, destroyRes);\n        delete this._sigCtrlCache[key];\n    }\n    public isLoading<keyType extends keyof CtrlKeyMapType>(key: keyType): boolean {\n        if (!key) {\n            console.warn(\"!!!key is null\");\n            return;\n        }\n        const ins = this._sigCtrlCache[key];\n        return ins ? ins.isLoading : false;\n    }\n    public isLoaded<keyType extends keyof CtrlKeyMapType>(key: keyType): boolean {\n        if (!key) {\n            console.warn(\"!!!key is null\");\n            return;\n        }\n        const ins = this._sigCtrlCache[key];\n        return ins ? ins.isLoaded : false;\n    }\n    public isInited<keyType extends keyof CtrlKeyMapType>(key: keyType): boolean {\n        if (!key) {\n            console.warn(\"!!!key is null\");\n            return;\n        }\n        const ins = this._sigCtrlCache[key];\n        return ins ? ins.isInited : false;\n    }\n    public isShowed<keyType extends keyof CtrlKeyMapType>(key: keyType): boolean {\n        if (!key) {\n            console.warn(\"!!!key is null\");\n            return false;\n        }\n        const ins = this._sigCtrlCache[key];\n        return ins ? ins.isShowed : false;\n    }\n\n    //基础操作函数\n\n    public insDpc<T, keyType extends keyof CtrlKeyMapType = any>(typeKey: keyType): displayCtrl.ReturnCtrlType<T> {\n        const ctrlClass = this._ctrlClassMap[typeKey];\n        if (!ctrlClass) {\n            console.error(`Not instantiate:${typeKey}`);\n            return null;\n        }\n        const ins = new ctrlClass();\n        ins.key = typeKey as any;\n        return ins as any;\n    }\n\n    public loadDpcByIns(ins: displayCtrl.ICtrl, loadCfg?: displayCtrl.ILoadConfig): void {\n        if (ins) {\n            if (ins.needLoad || (loadCfg && loadCfg.forceLoad)) {\n                ins.isLoaded = false;\n                ins.needLoad = true;\n            } else if (!ins.isLoaded && !ins.isLoading) {\n                ins.needLoad = true;\n            }\n            if (ins.needLoad) {\n                ins.needLoad = false;\n                this._loadRess(ins, loadCfg);\n            }\n        }\n    }\n    public initDpcByIns<keyType extends keyof CtrlKeyMapType>(\n        ins: displayCtrl.ICtrl,\n        initCfg?: displayCtrl.IInitConfig<keyType, InitDataTypeMapType>): void {\n        if (ins) {\n            if (!ins.isInited) {\n                ins.isInited = true;\n                ins.onInit && ins.onInit(initCfg);\n            }\n        }\n    }\n    public showDpcByIns<keyType extends keyof CtrlKeyMapType>(\n        ins: displayCtrl.ICtrl,\n        showCfg?: displayCtrl.IShowConfig<keyType, InitDataTypeMapType, ShowDataTypeMapType>\n    ): void {\n        ins.onShow && ins.onShow(showCfg);\n        ins.isShowed = true;\n        showCfg.showedCb && showCfg.showedCb(ins);\n    }\n    public hideDpcByIns<T extends displayCtrl.ICtrl = any>(dpcIns: T) {\n        if (!dpcIns) return;\n        dpcIns.needShow = false;\n        dpcIns.onHide && dpcIns.onHide();\n        dpcIns.isShowed = false;\n    }\n    public destroyDpcByIns(dpcIns: displayCtrl.ICtrl, destroyRes?: boolean) {\n        if (!dpcIns) return;\n        if (dpcIns.isInited) {\n            dpcIns.isLoaded = false;\n            dpcIns.isInited = false;\n            dpcIns.needShow = false;\n        }\n        if (dpcIns.isShowed) {\n            this.hideDpcByIns(dpcIns);\n        }\n        dpcIns.onDestroy && dpcIns.onDestroy(destroyRes);\n        if (destroyRes) {\n            const customResHandler = dpcIns as unknown as displayCtrl.IResHandler;\n            if (customResHandler.releaseRes) {\n                customResHandler.releaseRes(dpcIns);\n            } else if (this._resHandler && this._resHandler.releaseRes) {\n                this._resHandler.releaseRes(dpcIns);\n            }\n        }\n    }\n\n    protected _loadRess(ctrlIns: displayCtrl.ICtrl, loadCfg?: displayCtrl.ILoadConfig) {\n        if (ctrlIns) {\n            if (!ctrlIns.isLoaded) {\n                const loadHandler: displayCtrl.ILoadHandler = loadCfg ? loadCfg : {} as any;\n                if (isNaN(loadHandler.loadCount)) {\n                    loadHandler.loadCount = 0;\n                }\n                loadHandler.loadCount++;\n                const onComplete = () => {\n                    loadHandler.loadCount--;\n                    if (loadHandler.loadCount === 0) {\n                        ctrlIns.isLoaded = true;\n                        ctrlIns.isLoading = false;\n                        loadCfg && loadCfg?.loadCb(ctrlIns)\n                    }\n\n                }\n                const onError = () => {\n                    loadHandler.loadCount--;\n                    if (loadHandler.loadCount === 0) {\n                        ctrlIns.isLoaded = false;\n                        ctrlIns.isLoading = false;\n                        loadCfg && loadCfg?.loadCb(null);\n                    }\n                }\n\n                const customLoadViewIns: displayCtrl.IResHandler = ctrlIns as any;\n                ctrlIns.isLoading = true;\n                ctrlIns.isLoaded = false;\n                let onLoadData = loadCfg && loadCfg.onLoadData;\n                onLoadData =\n                    ctrlIns.onLoadData\n                        ? Object.assign(ctrlIns.onLoadData, onLoadData)\n                        : onLoadData;\n                if (customLoadViewIns.loadRes) {\n                    customLoadViewIns.loadRes({\n                        key: ctrlIns.key,\n                        complete: onComplete,\n                        error: onError,\n                        onLoadData: onLoadData\n                    });\n                } else if (this._resHandler) {\n                    const ress = ctrlIns.getRess ? ctrlIns.getRess() : null;\n                    if (!ress || !ress.length) {\n                        onComplete();\n                        return;\n                    }\n                    this._resHandler.loadRes({\n                        key: ctrlIns.key,\n                        ress: ress,\n                        complete: onComplete,\n                        error: onError,\n                        onLoadData: onLoadData\n                    });\n                } else {\n                    ctrlIns.isLoaded = false;\n                    ctrlIns.isLoading = false;\n                    onError();\n                    console.error(`load fail:${ctrlIns.key}`);\n                }\n            } else {\n                ctrlIns.isLoaded = true;\n                ctrlIns.isLoading = false;\n                loadCfg && loadCfg?.loadCb(ctrlIns);\n            }\n        }\n    }\n\n}"],"names":[],"mappings":"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"}