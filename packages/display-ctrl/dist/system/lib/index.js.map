{"version":3,"file":"index.js","sources":["../../../src/dp-ctrl-mgr.ts"],"sourcesContent":["/**\n * DisplayControllerMgr\n * 显示控制类管理器基类\n */\nexport class DpcMgr<\n    CtrlKeyMapType = any,\n    InitDataTypeMapType = any,\n    ShowDataTypeMapType = any,\n    UpdateDataTypeMapType = any>\n    implements displayCtrl.IMgr<\n    CtrlKeyMapType,\n    InitDataTypeMapType,\n    ShowDataTypeMapType,\n    UpdateDataTypeMapType> {\n\n\n    keys: CtrlKeyMapType = new Proxy({}, {\n        get(target, key) {\n            return key;\n        }\n    }) as any;\n    /**\n     * 单例缓存字典 key:ctrlKey,value:egf.IDpCtrl\n     */\n    protected _sigCtrlCache: displayCtrl.CtrlInsMap = {};\n    protected _sigCtrlShowCfgMap: { [P in keyof CtrlKeyMapType]: displayCtrl.IShowConfig } = {} as any;\n    protected _resHandler: displayCtrl.IResHandler;\n    /**\n     * 控制器类字典\n     */\n    protected _ctrlClassMap: { [P in keyof CtrlKeyMapType]: displayCtrl.CtrlClassType<displayCtrl.ICtrl> } = {} as any;\n    public get sigCtrlCache(): displayCtrl.CtrlInsMap {\n        return this._sigCtrlCache;\n    }\n    public getCtrlClass<keyType extends keyof CtrlKeyMapType>(typeKey: keyType) {\n        const clas = this._ctrlClassMap[typeKey];\n        return clas;\n    }\n    public init(resHandler?: displayCtrl.IResHandler): void {\n        if (!this._resHandler) {\n            this._resHandler = resHandler;\n        }\n    }\n    public registTypes(classes: displayCtrl.CtrlClassMap | displayCtrl.CtrlClassType[]) {\n        if (classes) {\n            if (typeof classes.length === \"number\" && classes.length) {\n                for (let i = 0; i < classes.length; i++) {\n                    this.regist(classes[i]);\n                }\n            } else {\n                for (const typeKey in classes) {\n                    this.regist(classes[typeKey], typeKey as any)\n                }\n            }\n\n        }\n\n    }\n    public regist(ctrlClass: displayCtrl.CtrlClassType, typeKey?: keyof CtrlKeyMapType): void {\n        const classMap = this._ctrlClassMap;\n        if (!ctrlClass.typeKey) {\n            if (!typeKey) {\n                console.error(`typeKey is null`);\n                return;\n            } else {\n                (ctrlClass as any)[\"typeKey\"] = typeKey;\n            }\n        }\n        if (classMap[ctrlClass.typeKey]) {\n            console.error(`type:${ctrlClass.typeKey} is exit`);\n        } else {\n            classMap[ctrlClass.typeKey] = ctrlClass;\n        }\n    }\n    public isRegisted<keyType extends keyof CtrlKeyMapType>(typeKey: keyType): boolean {\n        return !!this._ctrlClassMap[typeKey];\n    }\n    public getDpcRessInClass<keyType extends keyof CtrlKeyMapType>(typeKey: keyType): any[] | string[] {\n        const clas = this._ctrlClassMap[typeKey];\n        if (clas) {\n            return clas.ress;\n        } else {\n            console.error(`This class :${typeKey} is not registered `);\n            return undefined;\n        }\n    }\n    //单例操作\n\n    public getSigDpcRess<keyType extends keyof CtrlKeyMapType>(typeKey: keyType,): string[] {\n        const ctrlIns = this.getSigDpcIns(typeKey);\n        if (ctrlIns) {\n            return ctrlIns.getRess();\n        }\n        return null;\n    }\n    public loadSigDpc<T, keyType extends keyof CtrlKeyMapType = any>(typeKey: keyType, loadCfg?: displayCtrl.ILoadConfig): displayCtrl.ReturnCtrlType<T> {\n        const ctrlIns = this.getSigDpcIns(typeKey);\n        if (ctrlIns) {\n            this.loadDpcByIns(ctrlIns, loadCfg);\n        }\n        return ctrlIns as any;\n    }\n    public getSigDpcIns<T, keyType extends keyof CtrlKeyMapType = any>(typeKey: keyType): displayCtrl.ReturnCtrlType<T> {\n        const sigCtrlCache = this._sigCtrlCache;\n        if (!typeKey) return null;\n        let ctrlIns = sigCtrlCache[typeKey];\n        if (!ctrlIns) {\n            ctrlIns = ctrlIns ? ctrlIns : this.insDpc(typeKey);\n            ctrlIns && (sigCtrlCache[typeKey] = ctrlIns);\n        }\n        return ctrlIns as any;\n    }\n    public initSigDpc<T = any, keyType extends keyof CtrlKeyMapType = any>(\n        typeKey: keyType,\n        initCfg?: displayCtrl.IInitConfig<keyType, InitDataTypeMapType>\n    ): displayCtrl.ReturnCtrlType<T> {\n        let ctrlIns: displayCtrl.ICtrl;\n        ctrlIns = this.getSigDpcIns(typeKey);\n        this.initDpcByIns(ctrlIns, initCfg);\n        return ctrlIns as any;\n    }\n    public showDpc<T, keyType extends keyof CtrlKeyMapType = any>(\n        typeKey: keyType | displayCtrl.IShowConfig<keyType, InitDataTypeMapType, ShowDataTypeMapType>,\n        onShowData?: ShowDataTypeMapType[displayCtrl.ToAnyIndexKey<keyType, ShowDataTypeMapType>],\n        showedCb?: displayCtrl.CtrlInsCb<T>,\n        onInitData?: InitDataTypeMapType[displayCtrl.ToAnyIndexKey<keyType, InitDataTypeMapType>],\n        forceLoad?: boolean,\n        onLoadData?: any,\n        loadCb?: displayCtrl.CtrlInsCb,\n        showEndCb?: VoidFunction,\n        onCancel?: VoidFunction\n    ): displayCtrl.ReturnCtrlType<T> {\n        let showCfg: displayCtrl.IShowConfig<keyType>;\n        if (typeof typeKey == \"string\") {\n            showCfg = {\n                typeKey: typeKey,\n                onShowData: onShowData,\n                showedCb: showedCb,\n                onInitData: onInitData,\n                forceLoad: forceLoad,\n                onLoadData: onLoadData,\n                showEndCb: showEndCb,\n                loadCb: loadCb,\n                onCancel: onCancel\n            }\n        } else if (typeof typeKey === \"object\") {\n            showCfg = typeKey;\n            onShowData !== undefined && (showCfg.onShowData = onShowData);\n            showedCb !== undefined && (showCfg.showedCb = showedCb);\n            showEndCb !== undefined && (showCfg.showEndCb = showEndCb);\n            onInitData !== undefined && (showCfg.onInitData = onInitData);\n            forceLoad !== undefined && (showCfg.forceLoad = forceLoad);\n            onLoadData !== undefined && (showCfg.onLoadData = onLoadData);\n            loadCb !== undefined && (showCfg.loadCb = loadCb);\n            onCancel !== undefined && (showCfg.onCancel = onCancel);\n        } else {\n            console.warn(`unknown showDpc`, typeKey);\n            return;\n        }\n        const ins = this.getSigDpcIns(showCfg.typeKey as any);\n        if (!ins) {\n            console.error(`There is no registration :typeKey:${showCfg.typeKey}`);\n            return null;\n        };\n        ins.needShow = true;\n        const sigCtrlShowCfgMap = this._sigCtrlShowCfgMap;\n        const oldShowCfg = sigCtrlShowCfgMap[showCfg.typeKey];\n        if (oldShowCfg && showCfg) {\n            oldShowCfg.onCancel && oldShowCfg.onCancel();\n            Object.assign(oldShowCfg, showCfg);\n        } else {\n            sigCtrlShowCfgMap[showCfg.typeKey] = showCfg;\n        }\n        if (ins.needLoad || showCfg.forceLoad) {\n            ins.isLoaded = false;\n            ins.needLoad = true;\n        } else if (!ins.isLoaded && !ins.isLoading) {\n            ins.needLoad = true;\n        }\n        //需要加载\n        if (ins.needLoad) {\n            const preloadCfg = showCfg as displayCtrl.ILoadConfig;\n            const loadCb = preloadCfg.loadCb;\n            preloadCfg.loadCb = (loadedIns: displayCtrl.ICtrl) => {\n                loadCb && loadCb(loadedIns);\n                if (loadedIns) {\n                    const loadedShowCfg = sigCtrlShowCfgMap[showCfg.typeKey];\n                    if (loadedIns.needShow) {\n                        this.initDpcByIns(loadedIns, loadedShowCfg);\n                        this.showDpcByIns(loadedIns, loadedShowCfg);\n                        loadedIns.needShow = false;\n                    }\n                }\n                delete sigCtrlShowCfgMap[showCfg.typeKey];\n            }\n            ins.needLoad = false;\n            this._loadRess(ins, preloadCfg);\n        } else {\n            if (!ins.isInited) {\n                this.initDpcByIns(ins, showCfg.onInitData);\n            }\n\n            if (ins.isInited) {\n                this.showDpcByIns(ins, showCfg);\n                ins.needShow = false;\n\n            }\n        }\n        return ins as any;\n    }\n    public updateDpc<keyType extends keyof CtrlKeyMapType>(\n        key: keyType,\n        updateData?: UpdateDataTypeMapType[displayCtrl.ToAnyIndexKey<keyType, UpdateDataTypeMapType>]\n    ): void {\n        if (!key) {\n            console.warn(\"!!!key is null\");\n            return;\n        }\n        const ctrlIns = this._sigCtrlCache[key];\n        if (ctrlIns && ctrlIns.isInited) {\n            ctrlIns.onUpdate(updateData);\n        } else {\n            console.warn(` updateDpc key:${key}, The instance is not initialized`);;\n        }\n    }\n    public hideDpc<keyType extends keyof CtrlKeyMapType>(key: keyType): void {\n        if (!key) {\n            console.warn(\"!!!key is null\");\n            return;\n        }\n        const dpcIns = this._sigCtrlCache[key];\n        if (!dpcIns) {\n            console.warn(`${key} Not instantiate`);\n            return;\n        }\n        this.hideDpcByIns(dpcIns)\n    }\n\n    public destroyDpc<keyType extends keyof CtrlKeyMapType>(key: keyType, destroyRes?: boolean): void {\n        if (!key || key === \"\") {\n            console.warn(\"!!!key is null\");\n            return;\n        }\n        const ins = this._sigCtrlCache[key];\n        this.destroyDpcByIns(ins, destroyRes);\n        delete this._sigCtrlCache[key];\n    }\n    public isLoading<keyType extends keyof CtrlKeyMapType>(key: keyType): boolean {\n        if (!key) {\n            console.warn(\"!!!key is null\");\n            return;\n        }\n        const ins = this._sigCtrlCache[key];\n        return ins ? ins.isLoading : false;\n    }\n    public isLoaded<keyType extends keyof CtrlKeyMapType>(key: keyType): boolean {\n        if (!key) {\n            console.warn(\"!!!key is null\");\n            return;\n        }\n        const ins = this._sigCtrlCache[key];\n        return ins ? ins.isLoaded : false;\n    }\n    public isInited<keyType extends keyof CtrlKeyMapType>(key: keyType): boolean {\n        if (!key) {\n            console.warn(\"!!!key is null\");\n            return;\n        }\n        const ins = this._sigCtrlCache[key];\n        return ins ? ins.isInited : false;\n    }\n    public isShowed<keyType extends keyof CtrlKeyMapType>(key: keyType): boolean {\n        if (!key) {\n            console.warn(\"!!!key is null\");\n            return false;\n        }\n        const ins = this._sigCtrlCache[key];\n        return ins ? ins.isShowed : false;\n    }\n\n    //基础操作函数\n\n    public insDpc<T, keyType extends keyof CtrlKeyMapType = any>(typeKey: keyType): displayCtrl.ReturnCtrlType<T> {\n        const ctrlClass = this._ctrlClassMap[typeKey];\n        if (!ctrlClass) {\n            console.error(`Not instantiate:${typeKey}`);\n            return null;\n        }\n        const ins = new ctrlClass();\n        ins.key = typeKey as any;\n        return ins as any;\n    }\n\n    public loadDpcByIns(ins: displayCtrl.ICtrl, loadCfg?: displayCtrl.ILoadConfig): void {\n        if (ins) {\n            if (ins.needLoad || (loadCfg && loadCfg.forceLoad)) {\n                ins.isLoaded = false;\n                ins.needLoad = true;\n            } else if (!ins.isLoaded && !ins.isLoading) {\n                ins.needLoad = true;\n            }\n            if (ins.needLoad) {\n                ins.needLoad = false;\n                this._loadRess(ins, loadCfg);\n            }\n        }\n    }\n    public initDpcByIns<keyType extends keyof CtrlKeyMapType>(\n        ins: displayCtrl.ICtrl,\n        initCfg?: displayCtrl.IInitConfig<keyType, InitDataTypeMapType>): void {\n        if (ins) {\n            if (!ins.isInited) {\n                ins.isInited = true;\n                ins.onInit && ins.onInit(initCfg);\n            }\n        }\n    }\n    public showDpcByIns<keyType extends keyof CtrlKeyMapType>(\n        ins: displayCtrl.ICtrl,\n        showCfg?: displayCtrl.IShowConfig<keyType, InitDataTypeMapType, ShowDataTypeMapType>\n    ): void {\n        ins.onShow && ins.onShow(showCfg);\n        ins.isShowed = true;\n        showCfg.showedCb && showCfg.showedCb(ins);\n    }\n    public hideDpcByIns<T extends displayCtrl.ICtrl = any>(dpcIns: T) {\n        if (!dpcIns) return;\n        dpcIns.needShow = false;\n        dpcIns.onHide && dpcIns.onHide();\n        dpcIns.isShowed = false;\n    }\n    public destroyDpcByIns(dpcIns: displayCtrl.ICtrl, destroyRes?: boolean) {\n        if (!dpcIns) return;\n        if (dpcIns.isInited) {\n            dpcIns.isLoaded = false;\n            dpcIns.isInited = false;\n            dpcIns.needShow = false;\n        }\n        if (dpcIns.isShowed) {\n            this.hideDpcByIns(dpcIns);\n        }\n        dpcIns.onDestroy && dpcIns.onDestroy(destroyRes);\n        if (destroyRes) {\n            const customResHandler = dpcIns as unknown as displayCtrl.IResHandler;\n            if (customResHandler.releaseRes) {\n                customResHandler.releaseRes(dpcIns);\n            } else if (this._resHandler && this._resHandler.releaseRes) {\n                this._resHandler.releaseRes(dpcIns);\n            }\n        }\n    }\n\n    protected _loadRess(ctrlIns: displayCtrl.ICtrl, loadCfg?: displayCtrl.ILoadConfig) {\n        if (ctrlIns) {\n            if (!ctrlIns.isLoaded) {\n                const loadHandler: displayCtrl.ILoadHandler = loadCfg ? loadCfg : {} as any;\n                if (isNaN(loadHandler.loadCount)) {\n                    loadHandler.loadCount = 0;\n                }\n                loadHandler.loadCount++;\n                const onComplete = () => {\n                    loadHandler.loadCount--;\n                    if (loadHandler.loadCount === 0) {\n                        ctrlIns.isLoaded = true;\n                        ctrlIns.isLoading = false;\n                        loadCfg && loadCfg?.loadCb(ctrlIns)\n                    }\n\n                }\n                const onError = () => {\n                    loadHandler.loadCount--;\n                    if (loadHandler.loadCount === 0) {\n                        ctrlIns.isLoaded = false;\n                        ctrlIns.isLoading = false;\n                        loadCfg && loadCfg?.loadCb(null);\n                    }\n                }\n\n                const customLoadViewIns: displayCtrl.IResHandler = ctrlIns as any;\n                ctrlIns.isLoading = true;\n                ctrlIns.isLoaded = false;\n                let onLoadData = loadCfg && loadCfg.onLoadData;\n                onLoadData =\n                    ctrlIns.onLoadData\n                        ? Object.assign(ctrlIns.onLoadData, onLoadData)\n                        : onLoadData;\n                if (customLoadViewIns.loadRes) {\n                    customLoadViewIns.loadRes({\n                        key: ctrlIns.key,\n                        complete: onComplete,\n                        error: onError,\n                        onLoadData: onLoadData\n                    });\n                } else if (this._resHandler) {\n                    const ress = ctrlIns.getRess ? ctrlIns.getRess() : null;\n                    if (!ress || !ress.length) {\n                        onComplete();\n                        return;\n                    }\n                    this._resHandler.loadRes({\n                        key: ctrlIns.key,\n                        ress: ress,\n                        complete: onComplete,\n                        error: onError,\n                        onLoadData: onLoadData\n                    });\n                } else {\n                    ctrlIns.isLoaded = false;\n                    ctrlIns.isLoading = false;\n                    onError();\n                    console.error(`load fail:${ctrlIns.key}`);\n                }\n            } else {\n                ctrlIns.isLoaded = true;\n                ctrlIns.isLoading = false;\n                loadCfg && loadCfg?.loadCb(ctrlIns);\n            }\n        }\n    }\n\n}"],"names":[],"mappings":"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"}