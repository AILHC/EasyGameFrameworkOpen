{"version":3,"sources":["assets/tests/display-ctrl/abtest/ABTestModule.ts","assets/tests/display-ctrl/abtest/ABTestView.ts"],"names":["setDpcTestModuleMap_1","require","ABTestView_1","ABTestModule","prototype","onInit","console","log","dtM","uiMgr","regist","ABTestView","showABTestView","showDpc","exports","window","globalType","ABTestModuleType","dpctrl_ccc_1","Utils_1","DpcTestLayerType_1","_super","__extends","_this","apply","this","arguments","onLoadData","showLoading","loadRes","config","cc","assetManager","loadAny","path","prefabUrl","type","Prefab","TextAsset","bundle","err","error","complete","getRess","_ress","call","bundles","get","node","instantiate","getChildByName","on","Node","EventType","MOUSE_DOWN","hideDpc","key","bigTxtNode","getChild","getComponent","Label","string","text","onShow","layerMgr","addNodeToLayer","DpcTestLayerType","POP_UP_UI","onHide","releaseRes","viewPrefab","releaseAsset","typeKey","NodeCtrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA,IAAAA,wBAAAC,QAAA;IACA,IAAAC,eAAAD,QAAA;IAMA,IAAAE,eAAA;MAAA,SAAAA;MACIA,aAAAC,UAAAC,SAAA;QACIC,QAAAC,IAAA;QACAP,sBAAAQ,IAAAC,MAAAC,OAAAR,aAAAS,YAAA;;MAEJR,aAAAC,UAAAQ,iBAAA;QACIZ,sBAAAQ,IAAAC,MAAAI,QAAA;;MAER,OAAAV;KARA;IAAaW,QAAAX,eAAAA;IASbY,OAAAC,WAAAC,mBAAAd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IChBA,IAAAe,eAAAjB,QAAA;IACA,IAAAkB,UAAAlB,QAAA;IACA,IAAAmB,qBAAAnB,QAAA;IACA,IAAAD,wBAAAC,QAAA;IAOA,IAAAU,aAAA,SAAAU;MAAgCC,UAAAX,YAAAU;MAAhC,SAAAV;QAAA,IAAAY,QAAA,SAAAF,UAAAA,OAAAG,MAAAC,MAAAC,cAAAD;QAIIF,MAAAI,aAAA;UAAAC,aAAA;;;;MACAjB,WAAAP,UAAAyB,UAAA,SAAAC;QACIC,GAAAC,aAAAC,QAAA,EACI;UAAAC,MAAAvB,WAAAwB;UAAAC,MAAAL,GAAAM;WACA;UAAAH,MAAA;UAAAE,MAAAL,GAAAO;aACH;UAAAC,QAAA;WAAA,SAAAC;UACGA,MACIV,OAAAW,UAEAX,OAAAY;;;MAIZ/B,WAAAP,UAAAuC,UAAA;QACIhC,WAAAiC,UACIjC,WAAAiC,QAAA,EACIjC,WAAAwB,WACA;QAGR,OAAAxB,WAAAiC;;MAGJjC,WAAAP,UAAAC,SAAA;QAAA,IAAAkB,QAAAE;QACIJ,OAAAjB,UAAAC,OAAAwC,KAAApB;QACA,IAAAc,SAAAR,GAAAC,aAAAc,QAAAC,IAAA;QACAtB,KAAAuB,OAAAjB,GAAAkB,YAAAV,OAAAQ,IAAApC,WAAAwB,WAAAJ,GAAAM;QACAZ,KAAAuB,KAAAE,eAAA,cAAAC,GAAApB,GAAAqB,KAAAC,UAAAC,YAAA;UACItD,sBAAAQ,IAAAC,MAAA8C,QAAAhC,MAAAiC;;QAEJ,IAAAC,aAAAtC,QAAAuC,SAAAjC,KAAAuB,MAAA;QACAS,WAAAE,aAAA5B,GAAA6B,OAAAC,SAAAtB,OAAAQ,IAAA,QAAAhB,GAAAO,WAAAwB;;MAGJnD,WAAAP,UAAA2D,SAAA,SAAAjC;QACIT,OAAAjB,UAAA2D,OAAAlB,KAAApB,MAAAK;QACA9B,sBAAAQ,IAAAwD,SAAAC,eAAAxC,KAAAuB,MAAA5B,mBAAA8C,iBAAAC;;MAEJxD,WAAAP,UAAAgE,SAAA;QACI/C,OAAAjB,UAAAgE,OAAAvB,KAAApB;;MAEJd,WAAAP,UAAAiE,aAAA;QACI,IAAAC,aAAAvC,GAAAC,aAAAc,QAAAC,IAAA,UAAAA,IAAApC,WAAAwB,WAAAJ,GAAAM;QACAN,GAAAC,aAAAuC,aAAAD;;MA9CG3D,WAAA6D,UAAA;MAEO7D,WAAAwB,YAAA;MA8ClB,OAAAxB;KAjDA,CAAAO,aAAAuD;IAAa3D,QAAAH,aAAAA","sourcesContent":["import { dtM } from \"../setDpcTestModuleMap\";\r\nimport { ABTestView } from \"./ABTestView\";\r\ndeclare global {\r\n    interface IGlobalType {\r\n        ABTestModuleType: new () => ABTestModule\r\n    }\r\n}\r\nexport class ABTestModule implements egf.IModule {\r\n    onInit() {\r\n        console.log(`初始化`);\r\n        dtM.uiMgr.regist(ABTestView, \"ABTestView\");\r\n    }\r\n    showABTestView() {\r\n        dtM.uiMgr.showDpc(\"ABTestView\");\r\n    }\r\n}\r\nwindow.globalType.ABTestModuleType = ABTestModule;\r\n","import { NodeCtrl } from \"@ailhc/dpctrl-ccc\";\r\nimport { getChild, getPrefabNodeByPath } from \"../../../src/Utils\";\r\nimport { DpcTestLayerType } from \"../DpcTestLayerType\";\r\nimport { dtM } from \"../setDpcTestModuleMap\";\r\ndeclare global {\r\n    interface IDpcTestViewKeyMap {\r\n        ABTestView: \"ABTestView\"\r\n    }\r\n}\r\n// const NodeCtrl = window.globalType.NodeCtrlType;\r\nexport class ABTestView extends NodeCtrl implements displayCtrl.IResHandler {\r\n    static typeKey = \"ABTestView\";\r\n    private static _ress: string[];\r\n    public static prefabUrl = \"ABTestView\";\r\n    onLoadData: IDpcTestOnLoadData = { showLoading: true };\r\n    loadRes(config: displayCtrl.IResLoadConfig) {\r\n        cc.assetManager.loadAny([\r\n            { path: ABTestView.prefabUrl, type: cc.Prefab },\r\n            { path: \"txt1\", type: cc.TextAsset }\r\n        ], { bundle: \"abtest\" }, (err) => {\r\n            if (err) {\r\n                config.error()\r\n            } else {\r\n                config.complete();\r\n            }\r\n        })\r\n    }\r\n    getRess() {\r\n        if (!ABTestView._ress) {\r\n            ABTestView._ress = [\r\n                ABTestView.prefabUrl,\r\n                \"test-txts/txt1\"\r\n            ]\r\n        }\r\n        return ABTestView._ress;\r\n    }\r\n\r\n    onInit() {\r\n        super.onInit()\r\n        const bundle = cc.assetManager.bundles.get(\"abtest\");\r\n        this.node = cc.instantiate(bundle.get(ABTestView.prefabUrl, cc.Prefab));\r\n        this.node.getChildByName(\"close-icon\").on(cc.Node.EventType.MOUSE_DOWN, () => {\r\n            dtM.uiMgr.hideDpc(this.key);\r\n        })\r\n        const bigTxtNode = getChild(this.node, \"bigTxt\");\r\n        bigTxtNode.getComponent(cc.Label).string = bundle.get<cc.TextAsset>(\"txt1\", cc.TextAsset).text;\r\n\r\n    }\r\n    onShow(config: displayCtrl.IShowConfig) {\r\n        super.onShow(config);\r\n        dtM.layerMgr.addNodeToLayer(this.node, DpcTestLayerType.POP_UP_UI);\r\n    }\r\n    onHide() {\r\n        super.onHide();\r\n    }\r\n    releaseRes() {\r\n        const viewPrefab = cc.assetManager.bundles.get(\"abtest\").get(ABTestView.prefabUrl, cc.Prefab);\r\n        cc.assetManager.releaseAsset(viewPrefab);\r\n    }\r\n}"],"file":"index.js"}